// <auto-generated />
// This file was generated by a T4 template.
// Don't change it directly as your change would get overwritten.  Instead, make changes
// to the .tt file (i.e. the T4 template) and save it to regenerate this file.

// Make sure the compiler doesn't complain about missing Xml comments and CLS compliance
// 0108: suppress "Foo hides inherited member Foo. Use the new keyword if hiding was intended." when a controller and its abstract parent are both processed
// 0114: suppress "Foo.BarController.Baz()' hides inherited member 'Qux.BarController.Baz()'. To make the current member override that implementation, add the override keyword. Otherwise add the new keyword." when an action (with an argument) overrides an action in a parent controller
#pragma warning disable 1591, 3008, 3009, 0108, 0114
#region T4MVC

using System;
using System.Diagnostics;
using System.CodeDom.Compiler;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.CompilerServices;
using System.Threading.Tasks;
using System.Web;
using System.Web.Hosting;
using System.Web.Mvc;
using System.Web.Mvc.Ajax;
using System.Web.Mvc.Html;
using System.Web.Routing;
using T4MVC;
namespace Eumis.Portal.Web.Areas.Report.Controllers
{
    public partial class AccountController
    {
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        protected AccountController(Dummy d) { }

        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        protected RedirectToRouteResult RedirectToAction(ActionResult result)
        {
            var callInfo = result.GetT4MVCResult();
            return RedirectToRoute(callInfo.RouteValueDictionary);
        }

        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        protected RedirectToRouteResult RedirectToAction(Task<ActionResult> taskResult)
        {
            return RedirectToAction(taskResult.Result);
        }

        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        protected RedirectToRouteResult RedirectToActionPermanent(ActionResult result)
        {
            var callInfo = result.GetT4MVCResult();
            return RedirectToRoutePermanent(callInfo.RouteValueDictionary);
        }

        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        protected RedirectToRouteResult RedirectToActionPermanent(Task<ActionResult> taskResult)
        {
            return RedirectToActionPermanent(taskResult.Result);
        }

        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public virtual System.Web.Mvc.ActionResult PasswordRecovery()
        {
            return new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.PasswordRecovery);
        }
        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public virtual System.Web.Mvc.ActionResult Activate()
        {
            return new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.Activate);
        }

        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public AccountController Actions { get { return MVC.Report.Account; } }
        [GeneratedCode("T4MVC", "2.0")]
        public readonly string Area = "Report";
        [GeneratedCode("T4MVC", "2.0")]
        public readonly string Name = "Account";
        [GeneratedCode("T4MVC", "2.0")]
        public const string NameConst = "Account";
        [GeneratedCode("T4MVC", "2.0")]
        static readonly ActionNamesClass s_actions = new ActionNamesClass();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionNamesClass ActionNames { get { return s_actions; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionNamesClass
        {
            public readonly string Login = "Login";
            public readonly string AccessCodeLogin = "AccessCodeLogin";
            public readonly string Logout = "Logout";
            public readonly string ForgotPassword = "ForgotPassword";
            public readonly string PasswordRecovery = "PasswordRecovery";
            public readonly string Activate = "Activate";
            public readonly string ProfileEdit = "ProfileEdit";
            public readonly string ChangePassword = "ChangePassword";
        }

        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionNameConstants
        {
            public const string Login = "Login";
            public const string AccessCodeLogin = "AccessCodeLogin";
            public const string Logout = "Logout";
            public const string ForgotPassword = "ForgotPassword";
            public const string PasswordRecovery = "PasswordRecovery";
            public const string Activate = "Activate";
            public const string ProfileEdit = "ProfileEdit";
            public const string ChangePassword = "ChangePassword";
        }


        static readonly ActionParamsClass_Login s_params_Login = new ActionParamsClass_Login();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_Login LoginParams { get { return s_params_Login; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_Login
        {
            public readonly string vm = "vm";
            public readonly string captchaValid = "captchaValid";
        }
        static readonly ActionParamsClass_AccessCodeLogin s_params_AccessCodeLogin = new ActionParamsClass_AccessCodeLogin();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_AccessCodeLogin AccessCodeLoginParams { get { return s_params_AccessCodeLogin; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_AccessCodeLogin
        {
            public readonly string vm = "vm";
            public readonly string captchaValid = "captchaValid";
        }
        static readonly ActionParamsClass_ForgotPassword s_params_ForgotPassword = new ActionParamsClass_ForgotPassword();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_ForgotPassword ForgotPasswordParams { get { return s_params_ForgotPassword; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_ForgotPassword
        {
            public readonly string vm = "vm";
            public readonly string captchaValid = "captchaValid";
        }
        static readonly ActionParamsClass_PasswordRecovery s_params_PasswordRecovery = new ActionParamsClass_PasswordRecovery();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_PasswordRecovery PasswordRecoveryParams { get { return s_params_PasswordRecovery; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_PasswordRecovery
        {
            public readonly string ac = "ac";
            public readonly string vm = "vm";
        }
        static readonly ActionParamsClass_Activate s_params_Activate = new ActionParamsClass_Activate();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_Activate ActivateParams { get { return s_params_Activate; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_Activate
        {
            public readonly string ac = "ac";
            public readonly string vm = "vm";
        }
        static readonly ActionParamsClass_ProfileEdit s_params_ProfileEdit = new ActionParamsClass_ProfileEdit();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_ProfileEdit ProfileEditParams { get { return s_params_ProfileEdit; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_ProfileEdit
        {
            public readonly string vm = "vm";
        }
        static readonly ActionParamsClass_ChangePassword s_params_ChangePassword = new ActionParamsClass_ChangePassword();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_ChangePassword ChangePasswordParams { get { return s_params_ChangePassword; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_ChangePassword
        {
            public readonly string vm = "vm";
        }
        static readonly ViewsClass s_views = new ViewsClass();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ViewsClass Views { get { return s_views; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ViewsClass
        {
            static readonly _ViewNamesClass s_ViewNames = new _ViewNamesClass();
            public _ViewNamesClass ViewNames { get { return s_ViewNames; } }
            public class _ViewNamesClass
            {
                public readonly string AccessCodeLogin = "AccessCodeLogin";
                public readonly string Activate = "Activate";
                public readonly string ChangePassword = "ChangePassword";
                public readonly string ForgotPassword = "ForgotPassword";
                public readonly string Login = "Login";
                public readonly string PasswordRecovery = "PasswordRecovery";
                public readonly string ProfileEdit = "ProfileEdit";
            }
            public readonly string AccessCodeLogin = "~/Areas/Report/Views/Account/AccessCodeLogin.cshtml";
            public readonly string Activate = "~/Areas/Report/Views/Account/Activate.cshtml";
            public readonly string ChangePassword = "~/Areas/Report/Views/Account/ChangePassword.cshtml";
            public readonly string ForgotPassword = "~/Areas/Report/Views/Account/ForgotPassword.cshtml";
            public readonly string Login = "~/Areas/Report/Views/Account/Login.cshtml";
            public readonly string PasswordRecovery = "~/Areas/Report/Views/Account/PasswordRecovery.cshtml";
            public readonly string ProfileEdit = "~/Areas/Report/Views/Account/ProfileEdit.cshtml";
        }
    }

    [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
    public partial class T4MVC_AccountController : Eumis.Portal.Web.Areas.Report.Controllers.AccountController
    {
        public T4MVC_AccountController() : base(Dummy.Instance) { }

        [NonAction]
        partial void LoginOverride(T4MVC_System_Web_Mvc_ActionResult callInfo);

        [NonAction]
        public override System.Web.Mvc.ActionResult Login()
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.Login);
            LoginOverride(callInfo);
            return callInfo;
        }

        [NonAction]
        partial void LoginOverride(T4MVC_System_Web_Mvc_ActionResult callInfo, Eumis.Portal.Web.Models.Account.LoginVM vm, bool? captchaValid);

        [NonAction]
        public override System.Web.Mvc.ActionResult Login(Eumis.Portal.Web.Models.Account.LoginVM vm, bool? captchaValid)
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.Login);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "vm", vm);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "captchaValid", captchaValid);
            LoginOverride(callInfo, vm, captchaValid);
            return callInfo;
        }

        [NonAction]
        partial void AccessCodeLoginOverride(T4MVC_System_Web_Mvc_ActionResult callInfo);

        [NonAction]
        public override System.Web.Mvc.ActionResult AccessCodeLogin()
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.AccessCodeLogin);
            AccessCodeLoginOverride(callInfo);
            return callInfo;
        }

        [NonAction]
        partial void AccessCodeLoginOverride(T4MVC_System_Web_Mvc_ActionResult callInfo, Eumis.Portal.Web.Models.Account.AccessCodeLoginVM vm, bool? captchaValid);

        [NonAction]
        public override System.Web.Mvc.ActionResult AccessCodeLogin(Eumis.Portal.Web.Models.Account.AccessCodeLoginVM vm, bool? captchaValid)
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.AccessCodeLogin);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "vm", vm);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "captchaValid", captchaValid);
            AccessCodeLoginOverride(callInfo, vm, captchaValid);
            return callInfo;
        }

        [NonAction]
        partial void LogoutOverride(T4MVC_System_Web_Mvc_ActionResult callInfo);

        [NonAction]
        public override System.Web.Mvc.ActionResult Logout()
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.Logout);
            LogoutOverride(callInfo);
            return callInfo;
        }

        [NonAction]
        partial void ForgotPasswordOverride(T4MVC_System_Web_Mvc_ActionResult callInfo);

        [NonAction]
        public override System.Web.Mvc.ActionResult ForgotPassword()
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.ForgotPassword);
            ForgotPasswordOverride(callInfo);
            return callInfo;
        }

        [NonAction]
        partial void ForgotPasswordOverride(T4MVC_System_Web_Mvc_ActionResult callInfo, Eumis.Portal.Web.Models.Account.ForgotPasswordVM vm, bool? captchaValid);

        [NonAction]
        public override System.Web.Mvc.ActionResult ForgotPassword(Eumis.Portal.Web.Models.Account.ForgotPasswordVM vm, bool? captchaValid)
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.ForgotPassword);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "vm", vm);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "captchaValid", captchaValid);
            ForgotPasswordOverride(callInfo, vm, captchaValid);
            return callInfo;
        }

        [NonAction]
        partial void PasswordRecoveryOverride(T4MVC_System_Web_Mvc_ActionResult callInfo, string ac);

        [NonAction]
        public override System.Web.Mvc.ActionResult PasswordRecovery(string ac)
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.PasswordRecovery);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "ac", ac);
            PasswordRecoveryOverride(callInfo, ac);
            return callInfo;
        }

        [NonAction]
        partial void PasswordRecoveryOverride(T4MVC_System_Web_Mvc_ActionResult callInfo, Eumis.Portal.Web.Models.Account.ActivateVM vm);

        [NonAction]
        public override System.Web.Mvc.ActionResult PasswordRecovery(Eumis.Portal.Web.Models.Account.ActivateVM vm)
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.PasswordRecovery);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "vm", vm);
            PasswordRecoveryOverride(callInfo, vm);
            return callInfo;
        }

        [NonAction]
        partial void ActivateOverride(T4MVC_System_Web_Mvc_ActionResult callInfo, string ac);

        [NonAction]
        public override System.Web.Mvc.ActionResult Activate(string ac)
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.Activate);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "ac", ac);
            ActivateOverride(callInfo, ac);
            return callInfo;
        }

        [NonAction]
        partial void ActivateOverride(T4MVC_System_Web_Mvc_ActionResult callInfo, Eumis.Portal.Web.Models.Account.ActivateVM vm);

        [NonAction]
        public override System.Web.Mvc.ActionResult Activate(Eumis.Portal.Web.Models.Account.ActivateVM vm)
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.Activate);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "vm", vm);
            ActivateOverride(callInfo, vm);
            return callInfo;
        }

        [NonAction]
        partial void ProfileEditOverride(T4MVC_System_Web_Mvc_ActionResult callInfo);

        [NonAction]
        public override System.Web.Mvc.ActionResult ProfileEdit()
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.ProfileEdit);
            ProfileEditOverride(callInfo);
            return callInfo;
        }

        [NonAction]
        partial void ProfileEditOverride(T4MVC_System_Web_Mvc_ActionResult callInfo, Eumis.Portal.Web.Models.Account.ProfileVM vm);

        [NonAction]
        public override System.Web.Mvc.ActionResult ProfileEdit(Eumis.Portal.Web.Models.Account.ProfileVM vm)
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.ProfileEdit);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "vm", vm);
            ProfileEditOverride(callInfo, vm);
            return callInfo;
        }

        [NonAction]
        partial void ChangePasswordOverride(T4MVC_System_Web_Mvc_ActionResult callInfo);

        [NonAction]
        public override System.Web.Mvc.ActionResult ChangePassword()
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.ChangePassword);
            ChangePasswordOverride(callInfo);
            return callInfo;
        }

        [NonAction]
        partial void ChangePasswordOverride(T4MVC_System_Web_Mvc_ActionResult callInfo, Eumis.Portal.Web.Models.Account.ChangePasswordVM vm);

        [NonAction]
        public override System.Web.Mvc.ActionResult ChangePassword(Eumis.Portal.Web.Models.Account.ChangePasswordVM vm)
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.ChangePassword);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "vm", vm);
            ChangePasswordOverride(callInfo, vm);
            return callInfo;
        }

    }
}

#endregion T4MVC
#pragma warning restore 1591, 3008, 3009, 0108, 0114
