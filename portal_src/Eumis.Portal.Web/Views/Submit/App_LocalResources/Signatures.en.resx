<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="Actions" xml:space="preserve">
    <value>Actions</value>
  </data>
  <data name="CheckSignature" xml:space="preserve">
    <value>Please, before signing make sure, that you downloaded from step 1 and prepared for your signature loaded in the system and completed version of your Project proposal.</value>
  </data>
  <data name="DownloadProjectProposal" xml:space="preserve">
    <value>1. Download project proposal</value>
  </data>
  <data name="DownloadThis" xml:space="preserve">
    <value>downloading of</value>
  </data>
  <data name="ElectronicSignature" xml:space="preserve">
    <value>2. Sign with digital signature</value>
  </data>
  <data name="ElectronicSignatureDiscription" xml:space="preserve">
    <value>For more information about digital signature types, which ones are recognized, how they are used and how to sign with a digital signature, please contact your certification service provider and/or Managing authority.</value>
  </data>
  <data name="File" xml:space="preserve">
    <value>File</value>
  </data>
  <data name="FileName" xml:space="preserve">
    <value>File name: </value>
  </data>
  <data name="FileSignatureExtension" xml:space="preserve">
    <value>Signing a file with extension &lt;strong&gt;„.suni“&lt;/strong&gt; must be of type (scheme) &lt;strong&gt;„Detached signature“&lt;/strong&gt;. The output file contains only the digital signature without the original &lt;strong&gt;„.suni“&lt;/strong&gt; document and with extension &lt;strong&gt;„.p7s“&lt;/strong&gt; or other similar.</value>
  </data>
  <data name="FileExtension" xml:space="preserve">
    <value>- File with extension &lt;b&gt;„.suni“&lt;/b&gt; can not be attached, it is already loaded into the system.&lt;br /&gt;</value>
  </data>
  <data name="FollowTheInstructions" xml:space="preserve">
    <value>Follow the instructions.</value>
  </data>
  <data name="InvalideSignature" xml:space="preserve">
    <value>Invalid signature or signature/signatures (files with extrension „.p7s“) does not apply to loaded in the system and completed Project proposal. Please, after deletion of loaded file, execute again the following steps above.</value>
  </data>
  <data name="LoadSignature" xml:space="preserve">
    <value>3. Load signatures</value>
  </data>
  <data name="LoadSignatureType" xml:space="preserve">
    <value>- Load signatures - these are files with extension &lt;b&gt;„.p7s“&lt;/b&gt; or similar.</value>
  </data>
  <data name="Nbsp" xml:space="preserve">
    <value>&amp;nbsp;</value>
  </data>
  <data name="PersonsRepresentingCandidate" xml:space="preserve">
    <value>- Their number is equal to the number of persons representing the candidate in the procedure.</value>
  </data>
  <data name="ProjectProposal" xml:space="preserve">
    <value>project proposal</value>
  </data>
  <data name="ProjectProposalInstructions" xml:space="preserve">
    <value>To submit your project proposal, you need to download and save on your computer completed electronic form (file with extension &lt;b&gt;„.suni“&lt;/b&gt;), then sign it with the applicant's digital signature.</value>
  </data>
  <data name="ProjectProposalQualifiedElectronicSignature" xml:space="preserve">
    <value>To submit your project proposal electronically, you need to have a Qualified Electronic Signature.</value>
  </data>
  <data name="ProjectProposalRegistrationNumber" xml:space="preserve">
    <value>After submitting your project proposal, the system will provide an incoming registration number. The submitted project proposal will be stored in the system and can be found in the section &lt;b&gt;„Submitted“&lt;/b&gt; in menu &lt;b&gt;„Project proposals“&lt;/b&gt;</value>
  </data>
  <data name="SignatureHelp" xml:space="preserve">
    <value>Sign using the applicant's electronic signature the downloaded file with extension &lt;b&gt;„.suni“&lt;/b&gt;. In case the applicant is represented by more than one person, the file is signed by each of them.</value>
  </data>
  <data name="SubmissionProjectProposal" xml:space="preserve">
    <value>4. Submission of project proposal</value>
  </data>
  <data name="SubmitOnline" xml:space="preserve">
    <value>Submit online</value>
  </data>
  <data name="SubmitProjectProposal" xml:space="preserve">
    <value>submit project proposal</value>
  </data>
  <data name="Warning" xml:space="preserve">
    <value>Warning:</value>
  </data>
</root>