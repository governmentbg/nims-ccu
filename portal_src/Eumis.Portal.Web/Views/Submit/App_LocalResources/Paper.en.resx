<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="ApplyOnPaper" xml:space="preserve">
    <value>Apply on paper</value>
  </data>
  <data name="CompleteProjectProposal" xml:space="preserve">
    <value>The project proposal shall be completed by enclosing in its envelope all the attachments (paper or other, if any), including the printed declaration, completed and signed in person. The envelope shall be sealed, the label produced by the system shall be placed and submitted to the address indicated in the application guidelines.</value>
  </data>
  <data name="Declaration" xml:space="preserve">
    <value>DECLARATION</value>
  </data>
  <data name="DeclarationPrint" xml:space="preserve">
    <value>If necessary, at a later stage you may further print a declaration and a label.</value>
  </data>
  <data name="Download" xml:space="preserve">
    <value>DOWNLOAD</value>
  </data>
  <data name="DownloadDeclaration" xml:space="preserve">
    <value>Download declaration and label</value>
  </data>
  <data name="InCaseOfQuestion" xml:space="preserve">
    <value>If you get a question from the evaluation committee during the "Evaluation of project proposals" stage, you will be notified promptly through this account the email associated with it. All questions can be found in the "Project proposals" menu, where you will also have the opportunity to respond.</value>
  </data>
  <data name="Label" xml:space="preserve">
    <value>LABEL</value>
  </data>
  <data name="Menu" xml:space="preserve">
    <value>on menu</value>
  </data>
  <data name="ProjectProposal" xml:space="preserve">
    <value>„Project proposals“</value>
  </data>
  <data name="ProjectProposalOnPaper" xml:space="preserve">
    <value>Your paper submission proposal, which you have prepared, is stored in</value>
  </data>
  <data name="ProjectProposalRegistrationNumber" xml:space="preserve">
    <value>Once the project proposal has been submitted and accepted to the address indicated in the application guidelines and issued with an incoming registration number, it will be automatically moved to a section</value>
  </data>
  <data name="QuestionsTimeForResponse" xml:space="preserve">
    <value>All questions have given by the evaluation committee time for response, so it is necessary to check periodically the profile of the candidate and the e-mail associated with him/her</value>
  </data>
  <data name="ReadyToSubmit" xml:space="preserve">
    <value>Your project proposal is ready to submit to the address specified in the application guidelines</value>
  </data>
  <data name="Section" xml:space="preserve">
    <value>section</value>
  </data>
  <data name="SubmitExplained" xml:space="preserve">
    <value>To submit it, you need to download and print the envelope declaration prepared by the system and the envelope label from the buttons below.</value>
  </data>
  <data name="SubmitOnPaper" xml:space="preserve">
    <value>Submit on paper</value>
  </data>
  <data name="Submitted" xml:space="preserve">
    <value>„Submitted“</value>
  </data>
  <data name="Warning" xml:space="preserve">
    <value>Warning:</value>
  </data>
</root>