//--------------------------------------------------------------
// Autogenerated by XSDObjectGen version 1.0.0.0
//--------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.CompilerServices;
using System.Xml.Serialization;
using Eumis.Common.Linq;
using Eumis.Common.Validation;
using Eumis.Common.Validation.Resources;
using Eumis.Documents;
using Eumis.Documents.Contracts;
using Eumis.Documents.Enums;
using Eumis.Documents.Interfaces;
using Eumis.Documents.Validation;
using R_10018;

namespace R_10041
{
    public partial class Procurements : IDocumentNomenclatures, IEumisDocument, IEumisDocumentWithFiles, ILocalValidatable, IRemoteValidatable
    {
        string IEumisDocument.Id
        {
            get
            {
                return this.id;
            }
            set
            {
                this.id = value;
            }
        }

        DateTime IEumisDocument.CreateDate
        {
            get
            {
                return this.createDate;
            }
            set
            {
                this.createDate = value;
            }
        }

        DateTime IEumisDocument.ModificationDate
        {
            get
            {
                return this.modificationDate;
            }
            set
            {
                this.modificationDate = value;
            }
        }

        public IEnumerable<AttachedDocument> Files
        {
            get
            {
                return EnumerableExtensions.Concat(
                    this.GetFiles(d => d.ContractContractors.ContractContractorCollection, cc => cc.AttachedDocumentCollection),
                    this.GetFiles(d => d.ProcurementPlans.ProcurementPlanCollection, pp => pp.AttachedDocumentCollection));
            }
        }

        public static R_10041.Procurements Init(R_10040.BFPContract contract, Procurements procurements, string orderNum)
        {
            bool isInitialProcurements = procurements == null;

            if (procurements == null)
                procurements = new Procurements();

            procurements.id = Guid.NewGuid().ToString();
            procurements.createDate = DateTime.Now;
            procurements.orderNum = orderNum;

            procurements.ContractActivityItemCollection = new PrivateNomenclatureCollection();
            procurements.BudgetLevel3ItemCollection = new PrivateNomenclatureCollection();

            procurements.ContractActivityCollection = new BFPContractContractActivityCollection();
            procurements.BudgetLevel3Collection = new BFPContractProgrammeDetailsExpenseBudgetCollection();

            if (contract != null)
            {
                if (contract.BFPContractContractActivities != null && contract.BFPContractContractActivities.BFPContractContractActivityCollection != null)
                {
                    foreach (var activity in contract.BFPContractContractActivities.BFPContractContractActivityCollection)
                    {
                        procurements.ContractActivityCollection.Add(activity);
                        procurements.ContractActivityItemCollection.Add(new R_10000.PrivateNomenclature() { Id = activity.gid, Name = activity.Code });
                    }
                }

                if (contract.BFPContractDirectionsBudgetContract != null
                    && contract.BFPContractDirectionsBudgetContract.BFPContractBudget != null
                    && contract.BFPContractDirectionsBudgetContract.BFPContractBudget.BFPContractProgrammeBudgetCollection != null)
                {
                    for (int i = 0; i < contract.BFPContractDirectionsBudgetContract.BFPContractBudget.BFPContractProgrammeBudgetCollection.Count; i++)
                    {
                        var level1 = contract.BFPContractDirectionsBudgetContract.BFPContractBudget.BFPContractProgrammeBudgetCollection[i];
                        if (level1.BFPContractProgrammeExpenseBudgetCollection != null)
                        {
                            for (int j = 0; j < level1.BFPContractProgrammeExpenseBudgetCollection.Count; j++)
                            {
                                var level2 = level1.BFPContractProgrammeExpenseBudgetCollection[j];
                                if (level2.BFPContractProgrammeDetailsExpenseBudgetCollection != null)
                                {
                                    for (int k = 0; k < level2.BFPContractProgrammeDetailsExpenseBudgetCollection.Count; k++)
                                    {
                                        var level3 = level2.BFPContractProgrammeDetailsExpenseBudgetCollection[k];
                                        procurements.BudgetLevel3Collection.Add(level3);
                                        procurements.BudgetLevel3ItemCollection.Add(new R_10000.PrivateNomenclature() { Id = level3.gid, Name = R_10033.BFPContractProgrammeDetailsExpenseBudget.GetEnumText(level1, level2, level3) });
                                    }
                                }
                            }
                        }
                    }
                }
            }

            if (procurements.ProcurementPlans == null)
                procurements.ProcurementPlans = new ProcurementPlans();

            if (String.IsNullOrWhiteSpace(procurements.ProcurementPlans.id))
                procurements.ProcurementPlans.id = Guid.NewGuid().ToString();

            if (procurements.ProcurementPlans.ProcurementPlanCollection == null)
                procurements.ProcurementPlans.ProcurementPlanCollection = new ProcurementPlanCollection();

            if (isInitialProcurements 
                && contract.BFPContractPlans != null && contract.BFPContractPlans.BFPContractPlanCollection != null)
            {
                foreach (var contractPlan in contract.BFPContractPlans.BFPContractPlanCollection)
                {
                    procurements.ProcurementPlans.ProcurementPlanCollection.Add(new R_10048.ProcurementPlan() { BFPContractPlan = contractPlan });
                }
            }

            procurements.Load();

            return procurements;
        }

        private void Load()
        {
            #region Contractors

            if (this.Contractors == null)
                this.Contractors = new Contractors();

            if (String.IsNullOrWhiteSpace(this.Contractors.id))
                this.Contractors.id = Guid.NewGuid().ToString();

            if (this.Contractors.ContractorCollection == null)
                this.Contractors.ContractorCollection = new ContractorCollection();

            for (int i = 0; i < this.Contractors.ContractorCollection.Count; i++)
            {
                if (this.Contractors.ContractorCollection[i].VATRegistration == null || String.IsNullOrWhiteSpace(this.Contractors.ContractorCollection[i].VATRegistration.Value))
                    this.Contractors.ContractorCollection[i].VATRegistration = new R_09991.EnumNomenclature
                    {
                        Value = YesNoNotApplicableNomenclature.No.Id,
                        Description = YesNoNotApplicableNomenclature.No.Name
                    };
            }

            #endregion

            #region ContractContractors

            if (this.ContractContractors == null)
                this.ContractContractors = new ContractContractors();

            if (String.IsNullOrWhiteSpace(this.ContractContractors.id))
                this.ContractContractors.id = Guid.NewGuid().ToString();

            if (this.ContractContractors.ContractContractorCollection == null)
                this.ContractContractors.ContractContractorCollection = new ContractContractorCollection();

            for (int i = 0; i < this.ContractContractors.ContractContractorCollection.Count; i++)
            {
                if (this.ContractContractors.ContractContractorCollection[i].SubcontractorMemberCollection != null)
                {
                    for (int j = 0; j < this.ContractContractors.ContractContractorCollection[i].SubcontractorMemberCollection.Count; j++)
                    {
                        if (this.ContractContractors.ContractContractorCollection[i].SubcontractorMemberCollection[j].Type == null || String.IsNullOrWhiteSpace(this.ContractContractors.ContractContractorCollection[i].SubcontractorMemberCollection[j].Type.Value))
                            this.ContractContractors.ContractContractorCollection[i].SubcontractorMemberCollection[j].Type = new R_09991.EnumNomenclature
                            {
                                Value = SubcontractorMemberTypeNomenclature.Subcontractor.Id,
                                Description = SubcontractorMemberTypeNomenclature.Subcontractor.Name
                            };
                    }
                }
            }

            #endregion

            #region ProcurementPlans

            if (this.ProcurementPlans == null)
                this.ProcurementPlans = new ProcurementPlans();

            if (String.IsNullOrWhiteSpace(this.ProcurementPlans.id))
                this.ProcurementPlans.id = Guid.NewGuid().ToString();

            if (this.ProcurementPlans.ProcurementPlanCollection == null)
                this.ProcurementPlans.ProcurementPlanCollection = new ProcurementPlanCollection();

            #endregion
        }

        public static void LoadNomenclatures(ref R_10041.Procurements procurements, IList<ContractReportDocument> procedureProcurementDocuments, IList<ContractCentralProcurement> centralProcurements)
        {
            #region Nomenclatures

            procurements.Nomenclatures = new Dictionary<Eumis.Documents.Mappers.NomenclatureType, List<Eumis.Documents.Mappers.Nomenclature>>();

            procurements.Nomenclatures.Add(Eumis.Documents.Mappers.NomenclatureType.ContractReportDocumentType, procedureProcurementDocuments.Where(e => e.isActive).Select(e => new Eumis.Documents.Mappers.Nomenclature(e)).ToList());

            if (procurements.Nomenclatures[Eumis.Documents.Mappers.NomenclatureType.ContractReportDocumentType] != null)
            {
                procurements.RequiredDocumentsCodesNames = procurements
                    .Nomenclatures[Eumis.Documents.Mappers.NomenclatureType.ContractReportDocumentType]
                    .Where(e => e.IsRequired.HasValue && e.IsRequired.Value)
                    .Select(e => new Tuple<string, string>(e.Value, e.Name))
                    .ToList();
            }

            procurements.DocumentsExtensions = new Dictionary<string, string>();

            foreach (var document in procedureProcurementDocuments.Where(reportDocument => reportDocument.isActive))
            {
                if (!string.IsNullOrWhiteSpace(document.extension) && !procurements.DocumentsExtensions.ContainsKey(document.gid))
                {
                    procurements.DocumentsExtensions[document.gid] = document.extension;
                }
            }

            procurements.CentralProcurements = centralProcurements;

            #endregion
        }

        public void SetActivated()
        {
            if (this.Contractors != null && this.Contractors.ContractorCollection != null)
            {
                for (int i = 0; i < this.Contractors.ContractorCollection.Count; i++)
                {
                    this.Contractors.ContractorCollection[i].isActivated = true;
                }
            }

            if (this.ContractContractors != null && this.ContractContractors.ContractContractorCollection != null)
            {
                for (int i = 0; i < this.ContractContractors.ContractContractorCollection.Count; i++)
                {
                    this.ContractContractors.ContractContractorCollection[i].isActivated = true;
                }
            }


        }

        public void UpdateContractContractors()
        {
            if (this.ContractContractors != null && this.ContractContractors.ContractContractorCollection != null)
            {
                for (int i = 0; i < this.ContractContractors.ContractContractorCollection.Count; i++)
                {
                    if (!this.ContractContractors.ContractContractorCollection[i].HasSubcontractorMember)
                    {
                        this.ContractContractors.ContractContractorCollection[i].SubcontractorMemberCollection = new R_10047.SubcontractorMemberCollection();
                    }
                }
            }
        }

        public List<string> GetValidationWarnings()
        {
            List<string> warnings = new List<string>();

            foreach (var procurementPlan in ProcurementPlans.ProcurementPlanCollection.Where(x => x.BFPContractPlan.ErrandLegalAct.Id == Constants.ProcurementPlansErrandLegalActPmsGid))
            {
                if (!procurementPlan.IsAnnounced && procurementPlan.OffersDeadlineDate > DateTime.Now &&
                    procurementPlan.DifferentiatedPositionCollection.Count > 0)
                {
                    warnings.Add(string.Format(R10041.ViewTemplateAnnouncedWarning, procurementPlan.BFPContractPlan.Name));
                }
            }

            return warnings;
        }

        [XmlIgnore]
        public List<ModelValidationResultExtended> LocalValidationErrors { get; set; }

        [XmlIgnore]
        public Dictionary<Eumis.Documents.Mappers.NomenclatureType, List<Eumis.Documents.Mappers.Nomenclature>> Nomenclatures { get; set; }

        [XmlIgnore]
        public List<Tuple<string, string>> RequiredDocumentsCodesNames { get; set; }

        [XmlIgnore]
        public Dictionary<string, string> DocumentsExtensions { get; set; }

        [XmlIgnore]
        public List<string> RemoteValidationErrors { get; set; }

        [XmlIgnore]
        public List<string> RemoteValidationWarnings { get; set; }

        [XmlIgnore]
        public IList<ContractCentralProcurement> CentralProcurements { get; set; }
    }
}
