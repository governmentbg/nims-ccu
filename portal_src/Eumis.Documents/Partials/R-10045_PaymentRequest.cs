//--------------------------------------------------------------
// Autogenerated by XSDObjectGen version 1.0.0.0
//--------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Linq;
using System.Xml.Serialization;
using Eumis.Common.Validation;
using Eumis.Documents;
using Eumis.Documents.Contracts;
using Eumis.Documents.Enums;
using Eumis.Documents.Interfaces;
using Eumis.Documents.Validation;
using R_09991;
using R_10018;

namespace R_10045
{
    public partial class PaymentRequest : IDocumentNomenclatures, IEumisDocument, IEumisDocumentWithFiles, ILocalValidatable
    {
        string IEumisDocument.Id
        {
            get
            {
                return this.id;
            }
            set
            {
                this.id = value;
            }
        }

        DateTime IEumisDocument.CreateDate
        {
            get
            {
                return this.createDate;
            }
            set
            {
                this.createDate = value;
            }
        }

        DateTime IEumisDocument.ModificationDate
        {
            get
            {
                return this.modificationDate;
            }
            set
            {
                this.modificationDate = value;
            }
        }

        public IEnumerable<AttachedDocument> Files
        {
            get
            {
                return this.GetFiles(d => d.AttachedDocuments.AttachedDocumentCollection);
            }
        }

        public static PaymentRequest Init(R_09991.EnumNomenclature type, 
            string packageGid, 
            string contractGid, 
            string contractNumber, 
            string docNumber,
            string docSubNumber,
            R_10040.BFPContract contract)
        {
            var request = new PaymentRequest();

            request.id = Guid.NewGuid().ToString();
            request.createDate = DateTime.Now;

            request.packageGid = packageGid;
            request.contractGid = contractGid;

            request.contractNumber = contractNumber;
            request.docNumber = docNumber;
            request.docSubNumber = docSubNumber;

            request.BasicData = new R_10049.PaymentRequestBasicData();
            request.BasicData.Type = type;

            if (contract != null && contract.BFPContractBasicData != null)
            {
                request.BasicData.BeneficiaryRegistrationVAT = new EnumNomenclature();
                request.BasicData.BankAccount = contract.BFPContractBasicData.BankAccount;
            }

            request.Load();

            return request;
        }

        private void Load()
        {
            var noEnumNomenclature = new R_09991.EnumNomenclature
            {
                Value = YesNoNotApplicableNomenclature.No.Id,
                Description = YesNoNotApplicableNomenclature.No.Name
            };

            #region BasicData

            if (this.BasicData == null)
                this.BasicData = new R_10049.PaymentRequestBasicData();

            if (this.BasicData.BeneficiaryRegistrationVAT == null || String.IsNullOrWhiteSpace(this.BasicData.BeneficiaryRegistrationVAT.Value))
                this.BasicData.BeneficiaryRegistrationVAT = new R_09991.EnumNomenclature()
                {
                    Value = YesNoNotApplicableNomenclature.No.Id,
                    Description = YesNoNotApplicableNomenclature.No.Name
                };

            #endregion

            #region AttachedDocuments

            if (this.AttachedDocuments == null)
                this.AttachedDocuments = new PaymentRequestAttachedDocuments();

            if (String.IsNullOrWhiteSpace(this.AttachedDocuments.id))
                this.AttachedDocuments.id = Guid.NewGuid().ToString();

            if (this.AttachedDocuments.AttachedDocumentCollection == null)
                this.AttachedDocuments.AttachedDocumentCollection = new AttachedDocumentCollection();

            #endregion

        }

        public static void LoadNomenclatures(ref R_10045.PaymentRequest paymentRequest, IList<ContractReportDocument> procedureContractReportPaymentDocuments)
        {
            #region Nomenclatures

            paymentRequest.Nomenclatures = new Dictionary<Eumis.Documents.Mappers.NomenclatureType, List<Eumis.Documents.Mappers.Nomenclature>>();

            paymentRequest.Nomenclatures.Add(Eumis.Documents.Mappers.NomenclatureType.ContractReportDocumentType, procedureContractReportPaymentDocuments.Where(e => e.isActive).Select(e => new Eumis.Documents.Mappers.Nomenclature(e)).ToList());

            if (paymentRequest.Nomenclatures[Eumis.Documents.Mappers.NomenclatureType.ContractReportDocumentType] != null)
            {
                paymentRequest.RequiredDocumentsCodesNames = paymentRequest
                    .Nomenclatures[Eumis.Documents.Mappers.NomenclatureType.ContractReportDocumentType]
                    .Where(e => e.IsRequired.HasValue && e.IsRequired.Value)
                    .Select(e => new Tuple<string, string>(e.Value, e.Name))
                    .ToList();
            }

            paymentRequest.DocumentsExtensions = new Dictionary<string, string>();

            foreach (var document in procedureContractReportPaymentDocuments.Where(reportDocument => reportDocument.isActive))
            {
                if (!string.IsNullOrWhiteSpace(document.extension) && !paymentRequest.DocumentsExtensions.ContainsKey(document.gid))
                {
                    paymentRequest.DocumentsExtensions[document.gid] = document.extension;
                }
            }

            #endregion
        }

        public static void SetAdvanceVerificationPaymentPresence(ref PaymentRequest paymentRequest, bool? contractReportHasAdvanceVerificationPayment)
        {
            paymentRequest.BasicData.ContractReportHasAdvanceVerificationPayment = contractReportHasAdvanceVerificationPayment;
        }

        private static R_09991.EnumNomenclature ApplyDefaultEnumNomenclature(R_09991.EnumNomenclature result, R_09991.EnumNomenclature defaultValue)
        {
            if (result == null || String.IsNullOrWhiteSpace(result.Value) || String.IsNullOrWhiteSpace(result.Description))
                result = defaultValue;

            return result;
        }

        public void Copy(R_10045.PaymentRequest paymentRequest)
        {
            BasicData.StartDate = paymentRequest.BasicData.StartDate;
            BasicData.EndDate = paymentRequest.BasicData.EndDate;
            BasicData.AdditionalIncome = paymentRequest.BasicData.AdditionalIncome;
            BasicData.BankAccount = paymentRequest.BasicData.BankAccount;
            BasicData.FinanceReportAmount = paymentRequest.BasicData.FinanceReportAmount;
            BasicData.FinanceReportAmountWithoutIncome = paymentRequest.BasicData.FinanceReportAmountWithoutIncome;
            BasicData.OtherRegistration = paymentRequest.BasicData.OtherRegistration;
            BasicData.TotalAmount = paymentRequest.BasicData.TotalAmount;
            BasicData.BeneficiaryRegistrationVAT = paymentRequest.BasicData.BeneficiaryRegistrationVAT;

            AttachedDocuments = paymentRequest.AttachedDocuments;
            AttachedDocuments.id = Guid.NewGuid().ToString();

            foreach (var attachedDocument in this.AttachedDocuments.AttachedDocumentCollection)
            {
                attachedDocument.VersionNum = this.docNumber;
                attachedDocument.VersionSubNum = this.docSubNumber;
                attachedDocument.ActivationDate = null;
            }
        }

        [XmlIgnore]
        public IList<string> CanEnterErrors { get; set; }

        [XmlIgnore]
        public List<ModelValidationResultExtended> LocalValidationErrors { get; set; }

        [XmlIgnore]
        public Dictionary<Eumis.Documents.Mappers.NomenclatureType, List<Eumis.Documents.Mappers.Nomenclature>> Nomenclatures { get; set; }

        [XmlIgnore]
        public List<Tuple<string, string>> RequiredDocumentsCodesNames { get; set; }

        [XmlIgnore]
        public Dictionary<string, string> DocumentsExtensions { get; set; }

        [XmlIgnore]
        public List<string> RemoteValidationErrors { get; set; }

        [XmlIgnore]
        public List<string> RemoteValidationWarnings { get; set; }

    }
}
