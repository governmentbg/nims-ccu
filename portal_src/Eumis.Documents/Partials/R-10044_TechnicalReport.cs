//--------------------------------------------------------------
// Autogenerated by XSDObjectGen version 1.0.0.0
//--------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Linq;
using System.Xml.Serialization;
using Eumis.Common.Linq;
using Eumis.Common.Validation;
using Eumis.Documents;
using Eumis.Documents.Contracts;
using Eumis.Documents.Enums;
using Eumis.Documents.Interfaces;
using Eumis.Documents.Mappers;
using Eumis.Documents.Partials;
using Eumis.Documents.Validation;
using R_10018;

namespace R_10044
{
    public partial class TechnicalReport : BaseApplicationDocument, IDocumentNomenclatures, IEumisDocument, IEumisDocumentWithFiles, ILocalValidatable
    {
        string IEumisDocument.Id
        {
            get
            {
                return this.id;
            }
            set
            {
                this.id = value;
            }
        }

        DateTime IEumisDocument.CreateDate
        {
            get
            {
                return this.createDate;
            }
            set
            {
                this.createDate = value;
            }
        }

        DateTime IEumisDocument.ModificationDate
        {
            get
            {
                return this.modificationDate;
            }
            set
            {
                this.modificationDate = value;
            }
        }

        public IEnumerable<AttachedDocument> Files
        {
            get
            {
                return this.GetFiles(d => d.AttachedDocuments.AttachedDocumentCollection);
            }
        }

        public static TechnicalReport Init(
            string packageGid,
            string contractGid,
            string contractNumber,
            string docNumber,
            string docSubNumber,
            R_10040.BFPContract contract,
            R_10041.Procurements procurements,
            TechnicalReport lastTechnicalReport,
            List<ContractApprovedIndicator> approvedIndicators
            )
        {
            TechnicalReport report = new TechnicalReport();

            report.id = Guid.NewGuid().ToString();
            report.createDate = DateTime.Now;

            report.packageGid = packageGid;
            report.contractGid = contractGid;

            report.contractNumber = contractNumber;
            report.docNumber = docNumber;
            report.docSubNumber = docSubNumber;

            #region BasicData

            report.BasicData = new R_10052.TechnicalReportBasicData();
            report.BasicData.id = Guid.NewGuid().ToString();

            if (contract == null || contract.BFPContractBasicData == null || !contract.BFPContractBasicData.StartDate.HasValue)
                throw new Exception("StartDate is null");

            report.BasicData.Procedure = contract.BFPContractBasicData.Procedure;
            report.BasicData.ProjectName = contract.BFPContractBasicData.Name;

            report.BasicData.ExecutionPeriodStartDate = contract.BFPContractBasicData.StartDate;
            report.BasicData.ExecutionPeriodEndDate = contract.BFPContractBasicData.CompletionDate;

            report.BasicData.Beneficiary = contract.Beneficiary;

            report.BasicData.PartnerCollection = new R_10052.CompanyCollection();
            if (contract.Partners != null && contract.Partners.PartnerCollection != null)
                report.BasicData.PartnerCollection.AddRange(contract.Partners.PartnerCollection);

            #endregion

            #region Activities

            report.Activities = new Activities();
            report.Activities.ActivityCollection = new TechnicalReportActivityCollection();
            report.Activities.id = Guid.NewGuid().ToString();

            if (contract != null && contract.BFPContractContractActivities != null
                && contract.BFPContractContractActivities.BFPContractContractActivityCollection != null)
            {
                DateTime contractStartDate = contract.BFPContractBasicData.StartDate.Value;

                // Get data from contract
                foreach (var contractActivity in contract.BFPContractContractActivities.BFPContractContractActivityCollection)
                {
                    var startDate = contractStartDate.AddMonths(Int32.Parse(contractActivity.StartMonth) - 1);
                    var endDate = startDate.AddMonths(Int32.Parse(contractActivity.Duration));

                    report.Activities.ActivityCollection.Add(new R_10053.TechnicalReportActivity()
                    {
                        BFPContractActivity = new R_10053.BFPContractActivity()
                        {
                            gid = contractActivity.gid,
                            Code = contractActivity.Code,
                            Duration = contractActivity.Duration,
                            Result = contractActivity.Result,
                            StartDate = startDate,
                            EndDate = endDate
                        },
                        ActualStartDate = startDate,
                        ActualEndDate = endDate,
                        MonthsDuration = contractActivity.Duration
                    });
                }
            }

            // Get data from last technical report
            if (lastTechnicalReport != null && lastTechnicalReport.Activities != null && lastTechnicalReport.Activities.ActivityCollection != null)
            {
                for (int i = 0; i < report.Activities.ActivityCollection.Count; i++)
                {
                    var currentActivity = report.Activities.ActivityCollection[i];

                    var lastActivity = lastTechnicalReport.Activities.ActivityCollection
                        .FirstOrDefault(e => e.BFPContractActivity != null
                            && currentActivity.BFPContractActivity.gid.Equals(e.BFPContractActivity.gid));

                    if (lastActivity != null)
                    {
                        currentActivity.MonthsDuration = lastActivity.MonthsDuration;
                        currentActivity.ActualStartDate = lastActivity.ActualStartDate;
                        currentActivity.ActualEndDate = lastActivity.ActualEndDate;
                        currentActivity.CumulativeResult = lastActivity.CumulativeResult;
                    }
                }
            }

            #endregion

            #region Indicators

            report.Indicators = new Indicators();
            report.Indicators.IndicatorCollection = new TechnicalReportIndicatorCollection();
            report.Indicators.id = Guid.NewGuid().ToString();

            if (contract != null && contract.BFPContractIndicators != null
                && contract.BFPContractIndicators.BFPContractIndicatorCollection != null)
            {
                // Get data from contract
                foreach (var contractIndicator in contract.BFPContractIndicators.BFPContractIndicatorCollection)
                {
                    contractIndicator.IsLocked = false;

                    var techIndicator = new R_10054.TechnicalReportIndicator() { BFPContractIndicator = contractIndicator };

                    report.Indicators.IndicatorCollection.Add(techIndicator);
                }
            }

            #endregion

            report.Load(procurements, lastTechnicalReport, approvedIndicators);

            return report;
        }

        public void Load(R_10041.Procurements procurements, TechnicalReport lastTechnicalReport, List<ContractApprovedIndicator> approvedIndicators)
        {
            #region Activities

            // Get data from procurements
            if (procurements != null && procurements.ContractContractors != null && procurements.ContractContractors.ContractContractorCollection != null)
            {
                for (int i = 0; i < this.Activities.ActivityCollection.Count; i++)
                {
                    var activityGid = this.Activities.ActivityCollection[i].BFPContractActivity.gid;

                    var matchingContractContractors
                        = procurements.ContractContractors.ContractContractorCollection
                        .Where(e => e.ActivitiesBudgetDetailsRefCollection != null
                            && e.ActivitiesBudgetDetailsRefCollection
                                .Any(reference => reference.ContractActivity != null && activityGid.Equals(reference.ContractActivity.Id)));

                    this.Activities.ActivityCollection[i].ContractContractorCollection = new R_10053.PrivateNomenclatureCollection();
                    if (matchingContractContractors != null)
                        this.Activities.ActivityCollection[i].ContractContractorCollection
                            .AddRange(matchingContractContractors
                                .Select(e => new R_10000.PrivateNomenclature
                                {
                                    Id = e.gid,
                                    Name = e.NomenclatureName
                                }));
                }
            }

            #endregion

            #region Indicators

            if (this.Indicators != null
                && this.Indicators.IndicatorCollection != null)
            {
                // Get data from contract
                for (int i = 0; i < this.Indicators.IndicatorCollection.Count; i++)
                {
                    var techIndicator = this.Indicators.IndicatorCollection[i];

                    ContractApprovedIndicator contractApprovedIndicator = null;

                    if (approvedIndicators != null)
                    {
                        contractApprovedIndicator = approvedIndicators.FirstOrDefault(e => techIndicator.BFPContractIndicator.gid.Equals(e.contractIndicatorGid));
                    }

                    if (contractApprovedIndicator != null)
                    {
                        techIndicator.LastReportCumulativeAmountMen = contractApprovedIndicator.approvedCumulativeAmountMen;
                        techIndicator.LastReportCumulativeAmountWomen = contractApprovedIndicator.approvedCumulativeAmountWomen;
                        techIndicator.LastReportCumulativeAmountTotal = contractApprovedIndicator.approvedCumulativeAmountTotal;
                    }
                }
            }

            #endregion

            this.Load();
        }

        public void Load(TechnicalReport savedReport)
        {
            #region BasicData

            this.BasicData.Load(savedReport.BasicData);

            #endregion //BasicData

            #region Activities

            if (this.Activities?.ActivityCollection != null && savedReport.Activities?.ActivityCollection != null)
            {
                for (int i = 0; i < this.Activities.ActivityCollection.Count; i++)
                {
                    var currentActivity = this.Activities.ActivityCollection[i];
                    var matchingActivity = savedReport.Activities.ActivityCollection.Where(x => x.BFPContractActivity.gid == currentActivity.BFPContractActivity.gid).FirstOrDefault();
                    if (matchingActivity != null)
                    {
                        string activityName = currentActivity.BFPContractActivity.Code;
                        this.Activities.ActivityCollection[i] = matchingActivity;
                        this.Activities.ActivityCollection[i].BFPContractActivity.Code = activityName;
                    }
                }
            }

            #endregion //Activities

            #region Indicators

            if (this?.Indicators?.IndicatorCollection != null && savedReport?.Indicators?.IndicatorCollection != null)
            {
                for (int i = 0; i < this.Indicators.IndicatorCollection.Count; i++)
                {
                    var currentIndicator = this.Indicators.IndicatorCollection[i];
                    var matchingIndicator = savedReport.Indicators.IndicatorCollection.Where(x => x.BFPContractIndicator.gid == currentIndicator.BFPContractIndicator.gid).FirstOrDefault();
                    if (matchingIndicator != null)
                    {
                        currentIndicator.PeriodAmountMen = matchingIndicator.PeriodAmountMen;
                        currentIndicator.PeriodAmountWomen = matchingIndicator.PeriodAmountWomen;
                        currentIndicator.PeriodAmountTotal = matchingIndicator.PeriodAmountTotal;

                        currentIndicator.EvaluateCumulativeAmounts();

                        currentIndicator.EvaluateResidueAmounts();
                    }
                }
            }

            #endregion //Indicators

            this.Team = savedReport.Team;
            this.Team.id = Guid.NewGuid().ToString();

            this.AttachedDocuments = savedReport.AttachedDocuments;
            this.AttachedDocuments.id = Guid.NewGuid().ToString();
            foreach (var attachedDocument in this.AttachedDocuments.AttachedDocumentCollection)
            {
                attachedDocument.VersionNum = this.docNumber;
                attachedDocument.VersionSubNum = this.docSubNumber;
                attachedDocument.ActivationDate = null;
            }
        }

        private void Load()
        {
            #region BasicData

            if (this.BasicData == null)
                this.BasicData = new R_10052.TechnicalReportBasicData();

            #endregion

            #region Activities

            // Init
            if (this.Activities == null)
                this.Activities = new Activities();
            if (this.Activities.ActivityCollection == null)
                this.Activities.ActivityCollection = new TechnicalReportActivityCollection();
            if (String.IsNullOrWhiteSpace(this.Activities.id))
                this.Activities.id = Guid.NewGuid().ToString();

            // Check for exceptions
            if (this.Activities.ActivityCollection.Any(e => e.BFPContractActivity == null || String.IsNullOrWhiteSpace(e.BFPContractActivity.gid)))
                throw new Exception("Activity with missing contract activity in this.");

            #endregion

            #region Indicators

            // Init
            if (this.Indicators == null)
                this.Indicators = new Indicators();
            if (this.Indicators.IndicatorCollection == null)
                this.Indicators.IndicatorCollection = new TechnicalReportIndicatorCollection();
            if (String.IsNullOrWhiteSpace(this.Indicators.id))
                this.Indicators.id = Guid.NewGuid().ToString();

            // Check for exceptions
            if (this.Indicators.IndicatorCollection.Any(e => e.BFPContractIndicator == null || e.BFPContractIndicator.gid == ""))
                throw new Exception("Indicator with missing contract indicator in this.");

            #endregion

            #region Team

            // Init
            if (this.Team == null)
                this.Team = new Team();
            if (this.Team.TeamMemberCollection == null)
                this.Team.TeamMemberCollection = new TechnicalReportTeamMemberCollection();
            if (String.IsNullOrWhiteSpace(this.Team.id))
                this.Team.id = Guid.NewGuid().ToString();

            #endregion

            #region AttachedDocuments

            // Init
            if (this.AttachedDocuments == null)
                this.AttachedDocuments = new TechnicalReportAttachedDocuments();
            if (this.AttachedDocuments.AttachedDocumentCollection == null)
                this.AttachedDocuments.AttachedDocumentCollection = new AttachedDocumentCollection();
            if (String.IsNullOrWhiteSpace(this.AttachedDocuments.id))
                this.AttachedDocuments.id = Guid.NewGuid().ToString();

            #endregion
        }

        public void Copy(TechnicalReport originTechnicalReport)
        {
            this.BasicData.Load(originTechnicalReport.BasicData);

            if (Activities?.ActivityCollection != null && originTechnicalReport.Activities?.ActivityCollection != null)
            {
                foreach (var activity in Activities.ActivityCollection)
                {
                    var correspondingOrginActivity = originTechnicalReport.Activities.ActivityCollection.Where(x => x.BFPContractActivity.gid.Equals(activity.BFPContractActivity.gid)).FirstOrDefault();
                    if (correspondingOrginActivity == null)
                    {
                        continue;
                    }

                    activity.ExecutionDescription = correspondingOrginActivity.ExecutionDescription;
                    activity.Status = correspondingOrginActivity.Status;
                    activity.ActualStartDate = correspondingOrginActivity.ActualStartDate;
                    activity.ActualEndDate = correspondingOrginActivity.ActualEndDate;
                    activity.DelayReason = correspondingOrginActivity.DelayReason;
                    activity.PeriodResult = correspondingOrginActivity.PeriodResult;
                    activity.CumulativeResult = correspondingOrginActivity.CumulativeResult;
                }
            }

            if (Indicators?.IndicatorCollection != null && originTechnicalReport.Indicators?.IndicatorCollection != null)
            {
                foreach (var indicator in Indicators.IndicatorCollection)
                {
                    var correspondingOrginIndicator = originTechnicalReport.Indicators.IndicatorCollection.Where(x => x.BFPContractIndicator.gid.Equals(indicator.BFPContractIndicator.gid)).FirstOrDefault();
                    if (correspondingOrginIndicator == null)
                    {
                        continue;
                    }

                    indicator.PeriodAmountMen = correspondingOrginIndicator.PeriodAmountMen;
                    indicator.PeriodAmountWomen = correspondingOrginIndicator.PeriodAmountWomen;
                    indicator.PeriodAmountTotal = correspondingOrginIndicator.PeriodAmountTotal;
                    indicator.Comment = correspondingOrginIndicator.Comment;
                }
            }

            this.Team = originTechnicalReport.Team;
            this.Team.id = Guid.NewGuid().ToString();

            this.AttachedDocuments = originTechnicalReport.AttachedDocuments;
            this.AttachedDocuments.id = Guid.NewGuid().ToString();

            foreach (var attachedDocument in this.AttachedDocuments.AttachedDocumentCollection)
            {
                attachedDocument.VersionNum = this.docNumber;
                attachedDocument.VersionSubNum = this.docSubNumber;
                attachedDocument.ActivationDate = null;
            }
        }

        public static void LoadNomenclatures(ref R_10044.TechnicalReport technicalReport, IList<ContractReportDocument> procedureContractReportTechnicalDocuments, IList<ContractProcedureApplicationSection> procedureApplicationSections)
        {
            #region Nomenclatures

            technicalReport.Nomenclatures = new Dictionary<Eumis.Documents.Mappers.NomenclatureType, List<Eumis.Documents.Mappers.Nomenclature>>();

            if (procedureContractReportTechnicalDocuments == null)
            {
                procedureContractReportTechnicalDocuments = new List<ContractReportDocument>();
            }

            technicalReport.Nomenclatures.Add(Eumis.Documents.Mappers.NomenclatureType.ContractReportDocumentType, procedureContractReportTechnicalDocuments.Where(e => e.isActive).Select(e => new Eumis.Documents.Mappers.Nomenclature(e)).ToList());

            if (technicalReport.Nomenclatures[Eumis.Documents.Mappers.NomenclatureType.ContractReportDocumentType] != null)
            {
                technicalReport.RequiredDocumentsCodesNames = technicalReport
                    .Nomenclatures[Eumis.Documents.Mappers.NomenclatureType.ContractReportDocumentType]
                    .Where(e => e.IsRequired.HasValue && e.IsRequired.Value)
                    .Select(e => new Tuple<string, string>(e.Value, e.Name))
                    .ToList();
            }

            technicalReport.DocumentsExtensions = new Dictionary<string, string>();

            foreach (var document in procedureContractReportTechnicalDocuments.Where(reportDocument => reportDocument.isActive))
            {
                if (!string.IsNullOrWhiteSpace(document.extension) && !technicalReport.DocumentsExtensions.ContainsKey(document.gid))
                {
                    technicalReport.DocumentsExtensions[document.gid] = document.extension;
                }
            }

            technicalReport.LoadNomenclature(procedureApplicationSections);

            #endregion
        }

        [XmlIgnore]
        public IList<string> CanEnterErrors { get; set; }

        [XmlIgnore]
        public List<ModelValidationResultExtended> LocalValidationErrors { get; set; }

        [XmlIgnore]
        public Dictionary<Eumis.Documents.Mappers.NomenclatureType, List<Eumis.Documents.Mappers.Nomenclature>> Nomenclatures { get; set; }

        [XmlIgnore]
        public List<Tuple<string, string>> RequiredDocumentsCodesNames { get; set; }

        [XmlIgnore]
        public Dictionary<string, string> DocumentsExtensions { get; set; }

        [XmlIgnore]
        public List<string> RemoteValidationErrors { get; set; }

        [XmlIgnore]
        public List<string> RemoteValidationWarnings { get; set; }

    }
}
