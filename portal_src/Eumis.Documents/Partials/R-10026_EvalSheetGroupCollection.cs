//--------------------------------------------------------------
// Autogenerated by XSDObjectGen version 1.0.0.0
//--------------------------------------------------------------

using System;
using System.Xml.Serialization;
using System.Collections;
using System.Xml.Schema;
using System.ComponentModel;
using Eumis.Common.Resources;
using Eumis.Documents.Contracts;
using Eumis.Documents.Enums;
using System.Collections.Generic;
using Eumis.Documents.Interfaces;
using System.Linq;
using Eumis.Documents;
using Eumis.Common.Helpers;

namespace R_10026
{
    public partial class EvalSheetGroupCollection
    {
        public R_09993.EvalTypeNomenclature Type { get; set; }
        public decimal Total { get; set; }
        public decimal Limit { get; set; }

        public bool IsSuccess { get; set; }
        public bool IsManual { get; set; }
        public string ReasonManual { get; set; }

        [XmlIgnore]
        public decimal WeightDecimal
        {
            get
            {
                decimal result = 0.00m;

                foreach (var criteria in this)
                {
                    result += criteria.WeightDecimal;
                }

                return result;
            }
        }

        [XmlIgnore]
        public string WeightTotal
        {
            get
            {
                return DataUtils.DecimalToStringDecimalPointSpace(this.WeightDecimal);
            }
        }

        public void Init(EvalSheet sheet)
        {
            this.Type = sheet.type;
            this.Total = sheet.Total;
            this.Limit = sheet.Limit;
            this.IsManual = sheet.IsManual;
            this.ReasonManual = sheet.ReasonManual;
            this.IsSuccess = sheet.IsSuccess;

            for (int i = 0; i < this.Count; i++)
            {
                if (this[i].EvalSheetCriteriaCollection == null)
                    this[i].EvalSheetCriteriaCollection = new R_10025.EvalSheetCriteriaCollection();

                for (int j = 0; j < this[i].EvalSheetCriteriaCollection.Count; j++)
                {
                    if (this[i].EvalSheetCriteriaCollection[j].Accept == null || String.IsNullOrWhiteSpace(this[i].EvalSheetCriteriaCollection[j].Accept.Id))
                        this[i].EvalSheetCriteriaCollection[j].Accept = new R_10000.PrivateNomenclature
                            {
                                Id = AcceptanceTypeNomenclature.No.Id,
                                Name = AcceptanceTypeNomenclature.No.Name
                            };
                }
            }
        }
    }
}
