//--------------------------------------------------------------
// Autogenerated by XSDObjectGen version 1.0.0.0
//--------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.CompilerServices;
using System.Xml.Serialization;
using Eumis.Common.Linq;
using Eumis.Common.Validation;
using Eumis.Documents;
using Eumis.Documents.Contracts;
using Eumis.Documents.Enums;
using Eumis.Documents.Interfaces;
using Eumis.Documents.Mappers;
using Eumis.Documents.Partials;
using Eumis.Documents.Validation;
using R_10018;
using R_10093;

namespace R_10040
{
    public partial class BFPContract : BaseApplicationDocument, IDocumentNomenclatures, IEumisDocument, IEumisDocumentWithFiles, ILocalValidatable
    {
        string IEumisDocument.Id
        {
            get
            {
                return this.id;
            }
            set
            {
                this.id = value;
            }
        }

        DateTime IEumisDocument.CreateDate
        {
            get
            {
                return this.createDate;
            }
            set
            {
                this.createDate = value;
            }
        }

        DateTime IEumisDocument.ModificationDate
        {
            get
            {
                return this.modificationDate;
            }
            set
            {
                this.modificationDate = value;
            }
        }

        public IEnumerable<AttachedDocument> Files
        {
            get
            {
                return EnumerableExtensions.Concat(
                    this.GetFiles(d => d.AttachedDocuments.AttachedDocumentCollection));
            }
        }

        public static BFPContract AddMissingProperties(BFPContract contract, ContractProcedure procedure)
        {
            /*for (int i = 0; i < contract.BFPContractDirectionsBudgetContract.BFPContractBudget.BFPContractProgrammeBudgetCollection.Count; i++)
            {
                var level1 = contract.BFPContractDirectionsBudgetContract.BFPContractBudget.BFPContractProgrammeBudgetCollection[i];
                if (level1.BFPContractProgrammeExpenseBudgetCollection != null)
                {
                    for (int j = 0; j < level1.BFPContractProgrammeExpenseBudgetCollection.Count; j++)
                    {
                        var level2 = level1.BFPContractProgrammeExpenseBudgetCollection[j];
                        if (level2.BFPContractProgrammeDetailsExpenseBudgetCollection != null)
                        {
                            for (int k = 0; k < level2.BFPContractProgrammeDetailsExpenseBudgetCollection.Count; k++)
                            {
                                var level3 = level2.BFPContractProgrammeDetailsExpenseBudgetCollection[k];
                            }
                        }
                    }
                }
            }*/

            if (contract.BFPContractDirectionsBudgetContract.Directions == null)
            {
                contract.BFPContractDirectionsBudgetContract.Directions = new DirectionSection();
            }

            contract.BFPContractDirectionsBudgetContract.Directions.Items = DirectionSection.Load(procedure.directions);

            contract.LoadNomenclature(procedure.applicationSections);
            contract.ProcedureKind = ProcedureKind.GetProcedureKind(procedure.procedureKind.value);

            if (contract.ProcedureKind.Value == ProcedureKind.Budget.Value && procedure.year.HasValue)
            {
                contract.BFPContractBasicData.StartDate = new DateTime(procedure.year.Value, 1, 1);
                contract.BFPContractBasicData.CompletionDate = new DateTime(procedure.year.Value, 12, 31);
            }



            return contract;
        }


        public static BFPContract Init(R_10019.Project project, string programmeCode = "")
        {
            int programmeIndex = 0;
            if (!String.IsNullOrWhiteSpace(programmeCode))
            {
                var selectedProgramme = project.ProjectBasicData.ProgrammeBasicDataCollection.FirstOrDefault(e => e.Programme.Code.Equals(programmeCode));
                if (selectedProgramme != null)
                    programmeIndex = project.ProjectBasicData.ProgrammeBasicDataCollection.IndexOf(selectedProgramme);
            }

            BFPContract contract = new BFPContract();

            contract.type = R_09988.BFPContractTypeNomenclature.Initial;

            #region BasicData

            contract.BFPContractBasicData = new R_10031.BFPContractBasicData()
            {
                ProgrammeBasicData = project.ProjectBasicData.ProgrammeBasicDataCollection[programmeIndex],
                Procedure = project.ProjectBasicData.Procedure,
                Name = project.ProjectBasicData.Name,
                NameEN = project.ProjectBasicData.NameEN,
                Description = project.ProjectBasicData.Description,
                DescriptionEN = project.ProjectBasicData.DescriptionEN,
                Purpose = project.ProjectBasicData.Purpose,
                Duration = project.ProjectBasicData.Duration,

                NutsAddress = project.ProjectBasicData.NutsAddress,

                ProcedureIdentifier = project.ProjectBasicData.ProcedureIdentifier,
                ProcedureApplicationFormType = project.ProjectBasicData.ApplicationFormType
            };

            #endregion

            #region Beneficiary

            contract.Beneficiary = project.Candidate;
            contract.Beneficiary.isLocked = false;
            contract.Beneficiary.id = Guid.NewGuid().ToString();

            #endregion

            #region Partners

            contract.Partners = new BFPContractPartners()
            {
                id = Guid.NewGuid().ToString(),
                PartnerCollection = new CompanyCollection()
            };

            if (project.Partners != null && project.Partners.PartnerCollection != null)
            {
                foreach(var partner in project.Partners.PartnerCollection)
                {
                    partner.gid = Guid.NewGuid().ToString();
                    partner.isActive = true;
                    contract.Partners.PartnerCollection.Add(partner);
                }
            }

            #endregion

            #region DimensionsBudgetContract

            contract.BFPContractDirectionsBudgetContract = new BFPContractDirectionsBudgetContract()
            {
                id = Guid.NewGuid().ToString(),
                Directions = project.DirectionsBudgetContractCollection[programmeIndex].Directions,
                Contract = project.DirectionsBudgetContractCollection[programmeIndex].Contract,
                BFPContractBudget = R_10036.BFPContractBudget.Load(project.DirectionsBudgetContractCollection[programmeIndex].Budget)
            };

            #endregion

            #region ContractActivities

            contract.BFPContractContractActivities = new BFPContractContractActivities()
            {
                id = Guid.NewGuid().ToString(),
                BFPContractContractActivityCollection = new BFPContractContractActivityCollection()
            };

            foreach (var activity in project.ProgrammeContractActivitiesCollection[programmeIndex].ContractActivityCollection)
            {
                var contractActivity = new R_10037.BFPContractContractActivity()
                {
                    Amount = activity.Amount,
                    Code = activity.Code,
                    CompanyCollection = new R_10037.PrivateNomenclatureCollection(),
                    Duration = activity.Duration,
                    ExecutionMethod = activity.ExecutionMethod,
                    Name = activity.Name,
                    Result = activity.Result,
                    StartMonth = activity.StartMonth,

                    isActive = true,
                    gid = Guid.NewGuid().ToString()
                };
                contractActivity.CompanyCollection.AddRange(activity.CompanyCollection);

                contract.BFPContractContractActivities.BFPContractContractActivityCollection.Add(contractActivity);
            }

            #endregion

            #region Indicators

            contract.BFPContractIndicators = new BFPContractIndicators()
            {
                id = Guid.NewGuid().ToString(),
                BFPContractIndicatorCollection = new BFPContractIndicatorCollection()
            };

            foreach (var projectIndicator in project.ProgrammeIndicatorsCollection[programmeIndex].IndicatorCollection)
            {
                var indicator = new R_10038.BFPContractIndicator()
                {
                    SelectedIndicator = new R_10038.SelectedIndicator()
                    {
                        Id = projectIndicator.Id,
                        Name = projectIndicator.Name,
                        AggregatedReport = projectIndicator.AggregatedReport,
                        AggregatedTarget = projectIndicator.AggregatedTarget,
                        KindName = projectIndicator.KindName,
                        MeasureName = projectIndicator.MeasureName,
                        TrendName = projectIndicator.TrendName,
                        TypeName = projectIndicator.TypeName,
                        HasGenderDivision = projectIndicator.HasGenderDivision
                    },

                    BaseMen = projectIndicator.BaseMen,
                    BaseTotal = projectIndicator.BaseTotal,
                    BaseWomen = projectIndicator.BaseWomen,
                    TargetMen = projectIndicator.TargetMen,
                    TargetTotal = projectIndicator.TargetTotal,
                    TargetWomen = projectIndicator.TargetWomen,
                    Description = projectIndicator.Description,

                    isActive = true,
                    gid = Guid.NewGuid().ToString()
                };

                contract.BFPContractIndicators.BFPContractIndicatorCollection.Add(indicator);
            }

            #endregion

            #region ContractTeams

            contract.BFPContractContractTeams = new BFPContractContractTeams()
            {
                id = Guid.NewGuid().ToString(),
                BFPContractContractTeamCollection = new BFPContractContractTeamCollection()
            };

            foreach (var team in project.ContractTeams.ContractTeamCollection)
            {
                var contractTeam = new R_10039.BFPContractContractTeam()
                {
                    Email = team.Email,
                    Fax = team.Fax,
                    Name = team.Name,
                    Phone = team.Phone,
                    Position = team.Position,
                    Responsibilities = team.Responsibilities,
                };

                contract.BFPContractContractTeams.BFPContractContractTeamCollection.Add(contractTeam);
            }

            #endregion

            #region Plans

            contract.BFPContractPlans = new BFPContractPlans()
            {
                id = Guid.NewGuid().ToString(),
                BFPContractPlanCollection = new BFPContractPlanCollection()
            };

            if (project.ProjectErrands != null && project.ProjectErrands.ProjectErrandCollection != null)
            {
                foreach (var plan in project.ProjectErrands.ProjectErrandCollection)
                {
                    contract.BFPContractPlans.BFPContractPlanCollection.Add(R_10070.BFPContractPlan.Load(plan));
                }
            }

            #endregion

            #region SpecFields

            if(project.ProjectSpecFields != null)
            {
                contract.ProjectSpecFields = new BFPContractProjectSpecFields()
                {
                    id = project.ProjectSpecFields.id,
                    ProjectSpecFieldCollection = new ProjectSpecFieldCollection()
                };

                if (project.ProjectSpecFields.ProjectSpecFieldCollection != null)
                    contract.ProjectSpecFields.ProjectSpecFieldCollection.AddRange(project.ProjectSpecFields.ProjectSpecFieldCollection);
            }

            #endregion

            #region ElectronicDeclarations

            if (project.ElectronicDeclarations != null &&
                project.ElectronicDeclarations.ElectronicDeclarationCollection != null &&
                project.ElectronicDeclarations.ElectronicDeclarationCollection.Count > 0)
            {
                contract.ElectronicDeclarations = new BFPContractElectronicDeclarations()
                {
                    id = project.ElectronicDeclarations.id,
                    ElectronicDeclarationCollection = new ElectronicDeclarationCollection()
                };

                contract.ElectronicDeclarations.ElectronicDeclarationCollection.AddRange(project.ElectronicDeclarations.ElectronicDeclarationCollection);
            }

            #endregion

            #region AttachedDocuments

            contract.AttachedDocuments = new BFPContractAttachedDocuments()
            {
                id = Guid.NewGuid().ToString(),
                AttachedDocumentCollection = new AttachedDocumentCollection()
            };

            if (project.AttachedDocuments != null && project.AttachedDocuments.AttachedDocumentCollection != null)
                contract.AttachedDocuments.AttachedDocumentCollection.AddRange(project.AttachedDocuments.AttachedDocumentCollection);

            #endregion

            return contract;
        }

        public static BFPContract Load(ContractProcedure procedure, ContractBFPContractData contractData, BFPContract contract, bool isPartialReadOnly, Guid? procedureGid = null)
        {
            ContractProgramme selectedProgramme = procedure.programmes.FirstOrDefault(e => e.programmeCode.Equals(contract.BFPContractBasicData.ProgrammeBasicData.Programme.Code));

            // Map eu percents
            selectedProgramme.MapEuPercents(contractData.level2EuPercent);

            if (String.IsNullOrWhiteSpace(contract.id))
                contract.id = Guid.NewGuid().ToString();

            contract.IsPartialReadOnly = isPartialReadOnly;

            #region Nomenclatures

            LoadNomenclatures(ref contract, procedure, selectedProgramme);

            #endregion

            #region BasicData

            if (contract.BFPContractBasicData == null)
                contract.BFPContractBasicData = new R_10031.BFPContractBasicData();

            contract.BFPContractBasicData.NutsLevel = new R_09991.EnumNomenclature(procedure.nutsLevel);
            contract.BFPContractBasicData.Locations = procedure.locations.Select(x => new Tuple<R_09991.EnumNomenclature, string>(new R_09991.EnumNomenclature(x.nutsLevel), x.locationFullPath)).ToList();
            contract.BFPContractBasicData.MaxDuration = procedure.projectDuration.HasValue ? procedure.projectDuration.Value : 0;

            if (String.IsNullOrWhiteSpace(contract.BFPContractBasicData.id))
                contract.BFPContractBasicData.id = Guid.NewGuid().ToString();

            if (contract.BFPContractBasicData.NutsAddress == null)
                contract.BFPContractBasicData.NutsAddress = new R_09999.NutsAddress();

            if (contract.BFPContractBasicData.NutsAddress.NutsLevel == null || String.IsNullOrWhiteSpace(contract.BFPContractBasicData.NutsAddress.NutsLevel.Id))
                contract.BFPContractBasicData.NutsAddress.NutsLevel = new R_10000.PrivateNomenclature()
                {
                    Id = NutsLevelNomenclature.Settlement.Id,
                    Name = NutsLevelNomenclature.Settlement.Name
                };

            if (contract.BFPContractBasicData.NutsAddress.NutsAddressContentCollection == null || contract.BFPContractBasicData.NutsAddress.NutsAddressContentCollection.Count == 0)
                contract.BFPContractBasicData.NutsAddress.NutsAddressContentCollection = new R_09999.NutsAddressContentCollection()
                {
                    new R_09999.NutsAddressContent()
                };

            contract.BFPContractBasicData.ProgrammeBasicData = new R_09997.ProgrammeBasicData();

            var basicData = new R_09997.ProgrammeBasicData()
            {
                Programme = new R_10001.PublicNomenclature()
                {
                    Code = selectedProgramme.programmeCode,
                    Name = selectedProgramme.programmeName
                },
                ProgrammePriorityCollection = new R_09997.PublicNomenclatureCollection()
            };
            basicData.ProgrammePriorityCollection.AddRange(selectedProgramme.programmePriorities
                        .Select(e => new R_10001.PublicNomenclature()
                        {
                            Code = e.programmePriorityCode,
                            Name = e.programmePriorityName
                        }));

            contract.BFPContractBasicData.ProgrammeBasicData = basicData;

            if (procedureGid.HasValue)
            {
                contract.BFPContractBasicData.ProcedureIdentifier = procedureGid.ToString();
            }

            contract.BFPContractBasicData.Procedure = new R_10001.PublicNomenclature();
            contract.BFPContractBasicData.Procedure.Code = procedure.procedureCode;
            contract.BFPContractBasicData.Procedure.Name = procedure.procedureName;

            contract.BFPContractBasicData.IsPartialReadOnly = isPartialReadOnly;

            #endregion

            #region Beneficiary

            if (contract.Beneficiary == null)
            {
                contract.Beneficiary = new R_10004.Company()
                {
                    Seat = new R_10003.Address() { Country = new R_10001.PublicNomenclature() { Code = Constants.BulgariaId, Name = Constants.BulgariaName } },
                    Correspondence = new R_10003.Address() { Country = new R_10001.PublicNomenclature() { Code = Constants.BulgariaId, Name = Constants.BulgariaName } }
                };
            }

            if (String.IsNullOrWhiteSpace(contract.Beneficiary.id) && !isPartialReadOnly)
                contract.Beneficiary.id = Guid.NewGuid().ToString();

            contract.Beneficiary.IsPartialReadOnly = isPartialReadOnly;

            #endregion

            #region PartnerCollection

            if (contract.Partners == null)
                contract.Partners = new BFPContractPartners();

            if (String.IsNullOrWhiteSpace(contract.Partners.id) && !isPartialReadOnly)
                contract.Partners.id = Guid.NewGuid().ToString();

            #endregion

            #region DimensionsBudgetContract
                        
            if (contract.BFPContractDirectionsBudgetContract.Directions == null)
                contract.BFPContractDirectionsBudgetContract.Directions = new R_10093.DirectionSection();

            if (contract.BFPContractDirectionsBudgetContract.BFPContractBudget == null)
            {
                contract.BFPContractDirectionsBudgetContract.BFPContractBudget = new R_10036.BFPContractBudget();
            }

            if (!isPartialReadOnly)
            {
                contract.BFPContractDirectionsBudgetContract.BFPContractBudget.Load(selectedProgramme.budgetExpenseTypes);
            }

            #endregion

            #region ContractActivitiesCollection

            if (contract.BFPContractContractActivities == null)
                contract.BFPContractContractActivities = new BFPContractContractActivities();

            if (String.IsNullOrWhiteSpace(contract.BFPContractContractActivities.id) && !isPartialReadOnly)
                contract.BFPContractContractActivities.id = Guid.NewGuid().ToString();

            #endregion

            #region Indicators
            
            contract.BFPContractIndicators.Items = R_10040.BFPContractIndicators.Load(selectedProgramme.indicators);
            
            contract.AreIndicatorsUsed = selectedProgramme.indicators.Count > 0;

            if (!isPartialReadOnly)
            {
                // set inactive
                var inactiveIndicatorIds = selectedProgramme.indicators.Where(e => !e.isActive).Select(e => e.gid);

                for (int i = 0; i < contract.BFPContractIndicators.BFPContractIndicatorCollection.Count; i++)
                {
                    if (contract.BFPContractIndicators.BFPContractIndicatorCollection[i].SelectedIndicator != null
                        && inactiveIndicatorIds.Contains(contract.BFPContractIndicators.BFPContractIndicatorCollection[i].SelectedIndicator.Id))
                        contract.BFPContractIndicators.BFPContractIndicatorCollection[i].IsDeactivated = true;
                }

                if (String.IsNullOrWhiteSpace(contract.BFPContractIndicators.id))
                    contract.BFPContractIndicators.id = Guid.NewGuid().ToString();
            }

            #endregion

            #region ContractTeamCollection

            if (contract.BFPContractContractTeams == null)
                contract.BFPContractContractTeams = new BFPContractContractTeams();

            if (String.IsNullOrWhiteSpace(contract.BFPContractContractTeams.id))
                contract.BFPContractContractTeams.id = Guid.NewGuid().ToString();

            #endregion

            #region PlanCollection

            if (contract.BFPContractPlans == null)
                contract.BFPContractPlans = new BFPContractPlans();

            if (String.IsNullOrWhiteSpace(contract.BFPContractPlans.id))
                contract.BFPContractPlans.id = Guid.NewGuid().ToString();

            #endregion

            #region ElectronicDeclarations

            if (contract.ElectronicDeclarations == null)
                contract.ElectronicDeclarations = new BFPContractElectronicDeclarations();

            if (string.IsNullOrWhiteSpace(contract.ElectronicDeclarations.id))
                contract.ElectronicDeclarations.id = Guid.NewGuid().ToString();

            if (contract.ElectronicDeclarations.ElectronicDeclarationCollection == null)
                contract.ElectronicDeclarations.ElectronicDeclarationCollection = new ElectronicDeclarationCollection();

            #endregion

            #region AttachedDocumentCollection

            if (contract.AttachedDocuments == null)
                contract.AttachedDocuments = new BFPContractAttachedDocuments();

            if (String.IsNullOrWhiteSpace(contract.AttachedDocuments.id))
                contract.AttachedDocuments.id = Guid.NewGuid().ToString();

            if (contract.AttachedDocuments.AttachedDocumentCollection == null)
                contract.AttachedDocuments.AttachedDocumentCollection = new AttachedDocumentCollection();

            #endregion

            /*#region Directions

            if (contract.Directions == null)
            {
                contract.Directions = new R_10093.DirectionSection();
                contract.Directions.id = Guid.NewGuid().ToString();
            }

            contract.Directions.Items = R_10040.BFPContractDirections.Load(procedure.directions);

            if (contract.Directions.DirectionCollection == null)
            {
                contract.Directions.DirectionCollection = new DirectionCollection();
            }

            #endregion*/

            return contract;
        }

        public static BFPContract Load(BFPContract contract)
        {
            #region Calculations Dimensions budget contract

            decimal eligibleGrandTotal = 0;
            decimal eligibleSelfTotal = 0;
            decimal ineligibleGrandTotal = 0;
            decimal ineligibleSelfTotal = 0;

            contract.BFPContractDirectionsBudgetContract.BFPContractBudget.EUAmount = 0;
            contract.BFPContractDirectionsBudgetContract.BFPContractBudget.NationalAmount = 0;
            contract.BFPContractDirectionsBudgetContract.BFPContractBudget.GrandAmount = 0;
            contract.BFPContractDirectionsBudgetContract.BFPContractBudget.SelfAmount = 0;
            contract.BFPContractDirectionsBudgetContract.BFPContractBudget.TotalAmount = 0;

            for (int i = 0; i < contract.BFPContractDirectionsBudgetContract.BFPContractBudget.BFPContractProgrammeBudgetCollection.Count; i++)
            {
                var level1 = contract.BFPContractDirectionsBudgetContract.BFPContractBudget.BFPContractProgrammeBudgetCollection[i];

                level1.EUAmount = 0;
                level1.NationalAmount = 0;
                level1.GrandAmount = 0;
                level1.SelfAmount = 0;
                level1.TotalAmount = 0;

                if (level1.BFPContractProgrammeExpenseBudgetCollection != null)
                {
                    for (int j = 0; j < level1.BFPContractProgrammeExpenseBudgetCollection.Count; j++)
                    {
                        var level2 = level1.BFPContractProgrammeExpenseBudgetCollection[j];

                        level2.EUAmount = 0;
                        level2.NationalAmount = 0;
                        level2.GrandAmount = 0;
                        level2.SelfAmount = 0;
                        level2.TotalAmount = 0;

                        if (level2.BFPContractProgrammeDetailsExpenseBudgetCollection != null)
                        {
                            for (int k = 0; k < level2.BFPContractProgrammeDetailsExpenseBudgetCollection.Count; k++)
                            {
                                var level3 = level2.BFPContractProgrammeDetailsExpenseBudgetCollection[k];

                                level2.GrandAmount += level3.GrandAmount;
                                level2.SelfAmount += level3.SelfAmount;
                                level2.TotalAmount += level3.TotalAmount;

                                eligibleGrandTotal += level3.GrandAmount;
                                eligibleSelfTotal += level3.SelfAmount;
                                
                            }
                        }

                        level1.EUAmount += level2.EUAmount;
                        level1.NationalAmount += level2.NationalAmount;
                        level1.GrandAmount += level2.GrandAmount;
                        level1.SelfAmount += level2.SelfAmount;
                        level1.TotalAmount += level2.TotalAmount;
                    }
                }

                contract.BFPContractDirectionsBudgetContract.BFPContractBudget.EUAmount += level1.EUAmount;
                contract.BFPContractDirectionsBudgetContract.BFPContractBudget.NationalAmount += level1.NationalAmount;
                contract.BFPContractDirectionsBudgetContract.BFPContractBudget.GrandAmount += level1.GrandAmount;
                contract.BFPContractDirectionsBudgetContract.BFPContractBudget.SelfAmount += level1.SelfAmount;
                contract.BFPContractDirectionsBudgetContract.BFPContractBudget.TotalAmount += level1.TotalAmount;
            }

            #endregion

            #region Calculate contract

            //Искано финансиране (Безвъзмездна финансова помощ)
            contract.BFPContractDirectionsBudgetContract.Contract.RequestedFundingAmount = eligibleGrandTotal + ineligibleGrandTotal;

            //Общо съфинансиране
            contract.BFPContractDirectionsBudgetContract.Contract.TotalCoFinancingAmount = eligibleSelfTotal + ineligibleSelfTotal;

            //Общо допустими разходи
            contract.BFPContractDirectionsBudgetContract.Contract.TotalEligibleCosts = eligibleGrandTotal + eligibleSelfTotal;

            //Съотношение Безвъзмездна финансова помощ към Общо допустими разходи

            if (contract.BFPContractDirectionsBudgetContract.Contract.TotalEligibleCosts <= 0 || contract.BFPContractDirectionsBudgetContract.Contract.RequestedFundingAmount <= 0)
            {
                contract.BFPContractDirectionsBudgetContract.Contract.RatioRequestedFundingTotalEligibleCosts = "";
            }
            else
            {
                var ratio = contract.BFPContractDirectionsBudgetContract.Contract.TotalEligibleCosts / contract.BFPContractDirectionsBudgetContract.Contract.RequestedFundingAmount;
                contract.BFPContractDirectionsBudgetContract.Contract.RatioRequestedFundingTotalEligibleCosts = Math.Round((100 / ratio), 2, MidpointRounding.AwayFromZero) + " %";
            }

            //Недопустими разходи, необходими за изпълнението на проекта (когато е приложимо)
            contract.BFPContractDirectionsBudgetContract.Contract.IneligibleCosts = ineligibleGrandTotal + ineligibleSelfTotal;

            //Обща стойност на проектното предложение
            contract.BFPContractDirectionsBudgetContract.Contract.TotalProjectCost = contract.BFPContractDirectionsBudgetContract.Contract.TotalEligibleCosts + contract.BFPContractDirectionsBudgetContract.Contract.IneligibleCosts;

            // toFixed(2)
            contract.BFPContractDirectionsBudgetContract.Contract.RequestedFundingAmount = Math.Round(contract.BFPContractDirectionsBudgetContract.Contract.RequestedFundingAmount, 2, MidpointRounding.AwayFromZero);
            contract.BFPContractDirectionsBudgetContract.Contract.TotalCoFinancingAmount = Math.Round(contract.BFPContractDirectionsBudgetContract.Contract.TotalCoFinancingAmount, 2, MidpointRounding.AwayFromZero);
            contract.BFPContractDirectionsBudgetContract.Contract.TotalEligibleCosts = Math.Round(contract.BFPContractDirectionsBudgetContract.Contract.TotalEligibleCosts, 2, MidpointRounding.AwayFromZero);
            contract.BFPContractDirectionsBudgetContract.Contract.IneligibleCosts = Math.Round(contract.BFPContractDirectionsBudgetContract.Contract.IneligibleCosts, 2, MidpointRounding.AwayFromZero);
            contract.BFPContractDirectionsBudgetContract.Contract.TotalProjectCost = Math.Round(contract.BFPContractDirectionsBudgetContract.Contract.TotalProjectCost, 2, MidpointRounding.AwayFromZero);


            #endregion

            contract.SetActivated();

            return contract;
        }

        public static void LoadNomenclatures(ref BFPContract contract, ContractProcedure procedure, ContractProgramme programme)
        {
            #region Nomenclatures

            contract.Nomenclatures = new Dictionary<Eumis.Documents.Mappers.NomenclatureType, List<Eumis.Documents.Mappers.Nomenclature>>();

            // contract.Nomenclatures.Add(Eumis.Documents.Mappers.NomenclatureType.AttachedDocumentType, procedure.applicationDocs.Where(e => e.isActive).Select(e => new Eumis.Documents.Mappers.Nomenclature(e)).ToList());
            
            var programmePriorities = new List<Eumis.Documents.Mappers.Nomenclature>();

            if(programme != null && programme.programmePriorities != null)
            {
                foreach(var priority in programme.programmePriorities)
                {
                    programmePriorities.Add(new Eumis.Documents.Mappers.Nomenclature(priority.programmePriorityGid, priority.programmePriorityName));
                }
            }

            contract.Nomenclatures.Add(Eumis.Documents.Mappers.NomenclatureType.ProgrammePriority, programmePriorities);

            #endregion
        }

        public void SetDeclarationsAttributes(List<ContractProcedureDeclaration> procedureDeclarations)
        {
            if (this.ElectronicDeclarations != null && this.ElectronicDeclarations.ElectronicDeclarationCollection != null && this.ElectronicDeclarations.ElectronicDeclarationCollection.Count > 0)
            {
                for (int i = 0; i < this.ElectronicDeclarations.ElectronicDeclarationCollection.Count; i++)
                {
                    var procedureDeclaration = procedureDeclarations
                        .Where(d => d.gid.ToString() == this.ElectronicDeclarations.ElectronicDeclarationCollection[i].Gid)
                        .SingleOrDefault();

                    if (procedureDeclaration != null)
                    {
                        this.ElectronicDeclarations.ElectronicDeclarationCollection[i].IsActive = procedureDeclaration.isActive;
                    }
                }
            }
        }

        public static void SetInterventionFlags(BFPContract contract)
        {
            if (contract != null && contract.BFPContractDirectionsBudgetContract != null)
            {
                bool hasMoreThanOneNutsAddress = contract.BFPContractBasicData != null && contract.BFPContractBasicData.NutsAddress != null && contract.BFPContractBasicData.NutsAddress.NutsAddressContentCollection != null &&
                    contract.BFPContractBasicData.NutsAddress.NutsAddressContentCollection.Count > 1;

                if (contract.BFPContractDirectionsBudgetContract != null &&
                    contract.BFPContractDirectionsBudgetContract.BFPContractBudget != null)
                {
                    contract.BFPContractDirectionsBudgetContract.BFPContractBudget.HasMoreThanOneNutsAddress = hasMoreThanOneNutsAddress;
                }
            }
        }

        public void SetActivated()
        {
            this.type = R_09988.BFPContractTypeNomenclature.Change;

            // level3 budget
            if (this.BFPContractDirectionsBudgetContract != null
                && this.BFPContractDirectionsBudgetContract.BFPContractBudget != null
                && this.BFPContractDirectionsBudgetContract.BFPContractBudget.BFPContractProgrammeBudgetCollection != null)
            {
                for (int i = 0; i < this.BFPContractDirectionsBudgetContract.BFPContractBudget.BFPContractProgrammeBudgetCollection.Count; i++)
                {
                    if (this.BFPContractDirectionsBudgetContract.BFPContractBudget.BFPContractProgrammeBudgetCollection[i].BFPContractProgrammeExpenseBudgetCollection != null)
                    {
                        for (int j = 0; j < this.BFPContractDirectionsBudgetContract.BFPContractBudget.BFPContractProgrammeBudgetCollection[i].BFPContractProgrammeExpenseBudgetCollection.Count; j++)
                        {
                            if (this.BFPContractDirectionsBudgetContract.BFPContractBudget.BFPContractProgrammeBudgetCollection[i].BFPContractProgrammeExpenseBudgetCollection[j].BFPContractProgrammeDetailsExpenseBudgetCollection != null)
                            {
                                for (int k = 0; k < this.BFPContractDirectionsBudgetContract.BFPContractBudget.BFPContractProgrammeBudgetCollection[i].BFPContractProgrammeExpenseBudgetCollection[j].BFPContractProgrammeDetailsExpenseBudgetCollection.Count; k++)
                                {
                                    BFPContractDirectionsBudgetContract.BFPContractBudget.BFPContractProgrammeBudgetCollection[i].BFPContractProgrammeExpenseBudgetCollection[j].BFPContractProgrammeDetailsExpenseBudgetCollection[k].isActivated = true;
                                }
                            }
                        }
                    }
                }
            }

            // Partners
            if (this.Partners != null && this.Partners.PartnerCollection != null)
            {
                for (int i = 0; i < this.Partners.PartnerCollection.Count; i++)
                {
                    this.Partners.PartnerCollection[i].isActivated = true;
                }
            }

            // Contract activities
            if (this.BFPContractContractActivities != null && this.BFPContractContractActivities.BFPContractContractActivityCollection != null)
            {
                for (int i = 0; i < this.BFPContractContractActivities.BFPContractContractActivityCollection.Count; i++)
                {
                    this.BFPContractContractActivities.BFPContractContractActivityCollection[i].isActivated = true;
                }
            }

            // Indicators
            if (this.BFPContractIndicators != null && this.BFPContractIndicators.BFPContractIndicatorCollection != null)
            {
                for (int i = 0; i < this.BFPContractIndicators.BFPContractIndicatorCollection.Count; i++)
                {
                    this.BFPContractIndicators.BFPContractIndicatorCollection[i].isActivated = true;
                }
            }
        }

        public void PassIsInitial()
        {
            if (this.BFPContractDirectionsBudgetContract != null && this.BFPContractDirectionsBudgetContract.BFPContractBudget != null)
            {
                this.BFPContractDirectionsBudgetContract.BFPContractBudget.IsInitial = this.type == R_09988.BFPContractTypeNomenclature.Initial;
            }
        }

        [XmlIgnore]
        public bool HasProjectSpecFields
        {
            get
            {
                return this.ProjectSpecFields != null
                    && this.ProjectSpecFields.ProjectSpecFieldCollection != null
                    && this.ProjectSpecFields.ProjectSpecFieldCollection.Count > 0;
            }
        }

        [XmlIgnore]
        public bool IsStandardSimplifiedApplicationFormType
        {
            get
            {
                return this.BFPContractBasicData != null
                    && this.BFPContractBasicData.ProcedureApplicationFormType != null
                    && ApplicationFormTypeNomenclature.StandardSimplified.Code.Equals(this.BFPContractBasicData.ProcedureApplicationFormType.Value);
            }
        }

        [XmlIgnore]
        public List<ModelValidationResultExtended> LocalValidationErrors { get; set; }

        [XmlIgnore]
        public Dictionary<Eumis.Documents.Mappers.NomenclatureType, List<Eumis.Documents.Mappers.Nomenclature>> Nomenclatures { get; set; }

        [XmlIgnore]
        public List<string> RemoteValidationErrors { get; set; }

        [XmlIgnore]
        public List<string> RemoteValidationWarnings { get; set; }

        [XmlIgnore]
        public bool ShowPrintSap { get; set; }

        [XmlIgnore]
        public bool IsPartialReadOnly { get; set; }

        [XmlIgnore]
        public bool AreIndicatorsUsed { get; set; }

        [XmlIgnore]
        public ProcedureKind ProcedureKind { get; set; }
    }
}
