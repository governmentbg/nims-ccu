//--------------------------------------------------------------
// Autogenerated by XSDObjectGen version 1.0.0.0
//--------------------------------------------------------------

using System;
using System.Xml.Serialization;
using System.Collections;
using System.Xml.Schema;
using System.ComponentModel;
using Eumis.Common.Resources;
using Eumis.Documents.Contracts;
using Eumis.Documents.Enums;
using System.Collections.Generic;
using Eumis.Documents.Interfaces;
using System.Linq;
using Eumis.Documents;
using Eumis.Documents.Validation;
using Eumis.Common.Validation;
using Eumis.Common.Helpers;

namespace R_10077
{
    public partial class SpendingPlan : IDocumentNomenclatures, IEumisDocument, ILocalValidatable
    {
        string IEumisDocument.Id
        {
            get
            {
                return this.id;
            }
            set
            {
                this.id = value;
            }
        }

        DateTime IEumisDocument.CreateDate
        {
            get
            {
                return this.createDate;
            }
            set
            {
                this.createDate = value;
            }
        }

        DateTime IEumisDocument.ModificationDate
        {
            get
            {
                return this.modificationDate;
            }
            set
            {
                this.modificationDate = value;
            }
        }

        public static SpendingPlan Init(R_10040.BFPContract contract, SpendingPlan plan)
        {
            if (contract == null
                || contract.BFPContractBasicData == null
                || !contract.BFPContractBasicData.StartDate.HasValue
                || !contract.BFPContractBasicData.CompletionDate.HasValue)
                throw new Exception("Missing information in contract basic data");

            if (contract == null
                || contract.BFPContractDirectionsBudgetContract == null
                || contract.BFPContractDirectionsBudgetContract.BFPContractBudget == null
                || contract.BFPContractDirectionsBudgetContract.BFPContractBudget.BFPContractProgrammeBudgetCollection == null
                || contract.BFPContractDirectionsBudgetContract.BFPContractBudget.BFPContractProgrammeBudgetCollection.Count == 0)
                throw new Exception("Missing budget in contract");

            var contractBudget = contract.BFPContractDirectionsBudgetContract.BFPContractBudget;

            var newPlan = new SpendingPlan();

            newPlan.id = Guid.NewGuid().ToString();
            newPlan.createDate = DateTime.Now;

            #region load from contract

            newPlan.StartDate = contract.BFPContractBasicData.StartDate;
            newPlan.EndDate = contract.BFPContractBasicData.CompletionDate;

            newPlan.SpendingBudget = new R_10076.SpendingBudget()
            {
                SpendingBudgetLevel1Collection = new R_10076.SpendingBudgetLevel1Collection(),
                QuarterlyDistributionCollection = new R_10076.QuarterlyDistributionCollection()
            };
            newPlan.SpendingBudget.TotalAmount = contractBudget.GrandAmount;
            for (int i = newPlan.StartYear; i <= newPlan.EndYear; i++)
            {
                newPlan.SpendingBudget.QuarterlyDistributionCollection.Add(new R_10072.QuarterlyDistribution() { Year = i.ToString() });
            }

            foreach (var level1 in contractBudget.BFPContractProgrammeBudgetCollection)
            {
                var spendingLevel1 = new R_10075.SpendingBudgetLevel1()
                    {
                        gid = level1.gid,
                        Name = level1.Name,
                        OrderNum = level1.OrderNum,
                        TotalAmount = level1.GrandAmount,
                        QuarterlyDistributionCollection = new R_10075.QuarterlyDistributionCollection()
                    };
                for (int i = newPlan.StartYear; i <= newPlan.EndYear; i++)
                {
                    spendingLevel1.QuarterlyDistributionCollection.Add(new R_10072.QuarterlyDistribution() { Year = i.ToString() });
                }

                newPlan.SpendingBudget.SpendingBudgetLevel1Collection.Add(spendingLevel1);
            }

            #endregion

            #region load from old plan

            if (plan != null)
            {
                for (int i = 0; i < newPlan.SpendingBudget.SpendingBudgetLevel1Collection.Count; i++)
                {
                    var level1 = newPlan.SpendingBudget.SpendingBudgetLevel1Collection[i];
                    for (int j = 0; j < level1.QuarterlyDistributionCollection.Count; j++)
                    {
                        var quarter = level1.QuarterlyDistributionCollection[j];

                        if (Int32.Parse(quarter.Year) == newPlan.StartYear && Int32.Parse(quarter.Year) == newPlan.EndYear)
                        {
                            if (newPlan.StartQuarter <= 1 && newPlan.EndQuarter >= 1)
                                quarter.Q1Amount = plan.GetSpecificAmount(level1.gid, Int32.Parse(quarter.Year), 1);

                            if (newPlan.StartQuarter <= 2 && newPlan.EndQuarter >= 2)
                                quarter.Q2Amount = plan.GetSpecificAmount(level1.gid, Int32.Parse(quarter.Year), 2);

                            if (newPlan.StartQuarter <= 3 && newPlan.EndQuarter >= 3)
                                quarter.Q3Amount = plan.GetSpecificAmount(level1.gid, Int32.Parse(quarter.Year), 3);

                            if (newPlan.StartQuarter <= 4 && newPlan.EndQuarter >= 4)
                                quarter.Q4Amount = plan.GetSpecificAmount(level1.gid, Int32.Parse(quarter.Year), 4);
                        }
                        else if(Int32.Parse(quarter.Year) == newPlan.StartYear)
                        {
                            if (newPlan.StartQuarter <= 1)
                                quarter.Q1Amount = plan.GetSpecificAmount(level1.gid, Int32.Parse(quarter.Year), 1);

                            if (newPlan.StartQuarter <= 2)
                                quarter.Q2Amount = plan.GetSpecificAmount(level1.gid, Int32.Parse(quarter.Year), 2);

                            if (newPlan.StartQuarter <= 3)
                                quarter.Q3Amount = plan.GetSpecificAmount(level1.gid, Int32.Parse(quarter.Year), 3);

                            if (newPlan.StartQuarter <= 4)
                                quarter.Q4Amount = plan.GetSpecificAmount(level1.gid, Int32.Parse(quarter.Year), 4);
                        }
                        else if (Int32.Parse(quarter.Year) == newPlan.EndYear)
                        {
                            if (newPlan.EndQuarter >= 1)
                                quarter.Q1Amount = plan.GetSpecificAmount(level1.gid, Int32.Parse(quarter.Year), 1);

                            if (newPlan.EndQuarter >= 2)
                                quarter.Q2Amount = plan.GetSpecificAmount(level1.gid, Int32.Parse(quarter.Year), 2);

                            if (newPlan.EndQuarter >= 3)
                                quarter.Q3Amount = plan.GetSpecificAmount(level1.gid, Int32.Parse(quarter.Year), 3);

                            if (newPlan.EndQuarter >= 4)
                                quarter.Q4Amount = plan.GetSpecificAmount(level1.gid, Int32.Parse(quarter.Year), 4);
                        }
                        else
                        {
                            quarter.Q1Amount = plan.GetSpecificAmount(level1.gid, Int32.Parse(quarter.Year), 1);
                            quarter.Q2Amount = plan.GetSpecificAmount(level1.gid, Int32.Parse(quarter.Year), 2);
                            quarter.Q3Amount = plan.GetSpecificAmount(level1.gid, Int32.Parse(quarter.Year), 3);
                            quarter.Q4Amount = plan.GetSpecificAmount(level1.gid, Int32.Parse(quarter.Year), 4);
                        }
                    }
                }
            }

            #endregion

            newPlan.CalculateTotalAmounts();

            return newPlan;
        }

        private void CalculateTotalAmounts()
        {
            if(this.SpendingBudget != null && this.SpendingBudget.SpendingBudgetLevel1Collection != null && this.SpendingBudget.SpendingBudgetLevel1Collection.Count > 0)
            {
                for (int i = 0; i < this.SpendingBudget.SpendingBudgetLevel1Collection.Count; i++)
                {
                    var level1 = this.SpendingBudget.SpendingBudgetLevel1Collection[i];
                    for (int j = 0; j < level1.QuarterlyDistributionCollection.Count; j++)
                    {
                        var quarter = level1.QuarterlyDistributionCollection[j];

                        level1.TotalCalculatedAmount += quarter.Q1Amount;
                        this.SpendingBudget.TotalCalculatedAmount += quarter.Q1Amount;
                        this.SpendingBudget.QuarterlyDistributionCollection[j].Q1Amount += quarter.Q1Amount;

                        level1.TotalCalculatedAmount += quarter.Q2Amount;
                        this.SpendingBudget.TotalCalculatedAmount += quarter.Q2Amount;
                        this.SpendingBudget.QuarterlyDistributionCollection[j].Q2Amount += quarter.Q2Amount;

                        level1.TotalCalculatedAmount += quarter.Q3Amount;
                        this.SpendingBudget.TotalCalculatedAmount += quarter.Q3Amount;
                        this.SpendingBudget.QuarterlyDistributionCollection[j].Q3Amount += quarter.Q3Amount;

                        level1.TotalCalculatedAmount += quarter.Q4Amount;
                        this.SpendingBudget.TotalCalculatedAmount += quarter.Q4Amount;
                        this.SpendingBudget.QuarterlyDistributionCollection[j].Q4Amount += quarter.Q4Amount;
                    }
                }
            }
        }

        public decimal GetSpecificAmount(string level1Gid, int year, int quarter)
        {
            if (this.SpendingBudget != null
                && this.SpendingBudget.SpendingBudgetLevel1Collection != null)
            {
                var level1 = this.SpendingBudget.SpendingBudgetLevel1Collection.FirstOrDefault(e => e.gid.Equals(level1Gid));
                if (level1 != null && level1.QuarterlyDistributionCollection != null)
                {
                    var amounts = level1.QuarterlyDistributionCollection.FirstOrDefault(e => e.Year.Equals(year.ToString()));
                    if (amounts != null)
                    {
                        if (quarter == 1)
                            return amounts.Q1Amount;

                        if (quarter == 2)
                            return amounts.Q2Amount;

                        if (quarter == 3)
                            return amounts.Q3Amount;

                        if (quarter == 4)
                            return amounts.Q4Amount;
                    }
                }
            }

            return 0;
        }

        public int StartQuarter
        {
            get
            {
                int month = this.StartDate.Value.Month;

                if (month <= 3)
                    return 1;
                if (month <= 6)
                    return 2;
                if (month <= 9)
                    return 3;
                if (month <= 12)
                    return 4;

                throw new Exception("Invalid month.");
            }
        }

        public int EndQuarter
        {
            get
            {
                int month = this.EndDate.Value.Month;

                if (month <= 3)
                    return 1;
                if (month <= 6)
                    return 2;
                if (month <= 9)
                    return 3;
                if (month <= 12)
                    return 4;

                throw new Exception("Invalid month.");
            }
        }

        public int StartYear
        {
            get
            {
                return this.StartDate.Value.Year;
            }
        }

        public int EndYear
        {
            get
            {
                return this.EndDate.Value.Year;
            }
        }

        [XmlIgnore]
        public List<ModelValidationResultExtended> LocalValidationErrors { get; set; }

        [XmlIgnore]
        public Dictionary<Eumis.Documents.Mappers.NomenclatureType, List<Eumis.Documents.Mappers.Nomenclature>> Nomenclatures { get; set; }

        [XmlIgnore]
        public List<string> RemoteValidationErrors { get; set; }

        [XmlIgnore]
        public List<string> RemoteValidationWarnings { get; set; }

    }
}
