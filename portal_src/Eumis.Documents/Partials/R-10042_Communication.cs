//--------------------------------------------------------------
// Autogenerated by XSDObjectGen version 1.0.0.0
//--------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Xml.Serialization;
using Eumis.Common.Resources;
using Eumis.Common.Validation;
using Eumis.Documents;
using Eumis.Documents.Contracts;
using Eumis.Documents.Interfaces;
using Eumis.Documents.Validation;
using R_10018;

namespace R_10042
{
    public partial class Communication : IDocumentNomenclatures, IEumisDocument, IEumisDocumentWithFiles, ILocalValidatable
    {
        string IEumisDocument.Id
        {
            get
            {
                return this.id;
            }
            set
            {
                this.id = value;
            }
        }

        DateTime IEumisDocument.CreateDate
        {
            get
            {
                return this.createDate;
            }
            set
            {
                this.createDate = value;
            }
        }

        DateTime IEumisDocument.ModificationDate
        {
            get
            {
                return this.modificationDate;
            }
            set
            {
                this.modificationDate = value;
            }
        }

        public IEnumerable<AttachedDocument> Files
        {
            get
            {
                return this.GetFiles(d => d.AttachedDocumentCollection);
            }
        }

        public static Communication Init(Communication communication, R_09987.CommunicationTypeNomenclature type)
        {
            if (communication == null)
            {
                communication = new Communication();
                communication.createDate = DateTime.Now;
            }

            communication.type = type;

            if (communication.AttachedDocumentCollection == null)
                communication.AttachedDocumentCollection = new AttachedDocumentCollection();

            if (String.IsNullOrWhiteSpace(communication.id))
                communication.id = Guid.NewGuid().ToString();

            return communication;
        }

        public static Communication Init(Communication communication, ContractCommunicationInitializer communicationInitializer)
        {
            communication = Communication.Init(communication, communicationInitializer.type);

            communication.Subject = communicationInitializer.subject;
            communication.Content = communicationInitializer.body;

            communication.id = Constants.CommunicationTemplateXmlKey;

            communicationInitializer.files.ForEach(x =>
            {
                communication.AttachedDocumentCollection.Add(new AttachedDocument()
                {
                    Description = x.description,
                    AttachedDocumentContent = new R_09992.AttachedDocumentContent()
                    {
                        BlobContentId = x.fileKey.ToString(),
                        FileName = x.fileName,
                    }
                });
            });
            return communication;
        }

        public static string GetDocumentHeaderText(R_09987.CommunicationTypeNomenclature type)
        {
            string result = Global.Communication;

            if (type == R_09987.CommunicationTypeNomenclature.Cert)
            {
                result = Global.CommunicationCert;
            }
            if (type == R_09987.CommunicationTypeNomenclature.Audit)
            {
                result = Global.CommunicationAudit;
            }

            return result;
        }

        [XmlIgnore]
        public List<ModelValidationResultExtended> LocalValidationErrors { get; set; }

        [XmlIgnore]
        public Dictionary<Eumis.Documents.Mappers.NomenclatureType, List<Eumis.Documents.Mappers.Nomenclature>> Nomenclatures { get; set; }

        [XmlIgnore]
        public List<string> RemoteValidationErrors { get; set; }

        [XmlIgnore]
        public List<string> RemoteValidationWarnings { get; set; }

    }
}
