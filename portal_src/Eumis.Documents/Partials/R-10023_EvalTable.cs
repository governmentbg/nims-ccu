//--------------------------------------------------------------
// Autogenerated by XSDObjectGen version 1.0.0.0
//--------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Xml.Serialization;
using Eumis.Common.Validation;
using Eumis.Documents;
using Eumis.Documents.Interfaces;
using Eumis.Documents.Validation;
using R_10018;
using R_10022;

namespace R_10023
{
    public partial class EvalTable : IEumisDocument, IEumisDocumentWithFiles, ILocalValidatable
    {
        string IEumisDocument.Id
        {
            get
            {
                return this.id;
            }
            set
            {
                this.id = value;
            }
        }

        DateTime IEumisDocument.CreateDate
        {
            get
            {
                return this.createDate;
            }
            set
            {
                this.createDate = value;
            }
        }

        DateTime IEumisDocument.ModificationDate
        {
            get
            {
                return this.modificationDate;
            }
            set
            {
                this.modificationDate = value;
            }
        }

        public IEnumerable<AttachedDocument> Files
        {
            get
            {
                return this.GetFiles(d => d.AttachedDocumentCollection);
            }
        }

        public static EvalTable Load(EvalTable table)
        {
            if (table.AttachedDocumentCollection == null)
                table.AttachedDocumentCollection = new AttachedDocumentCollection();

            if (table.EvalTableGroupCollection == null)
            {
                table.EvalTableGroupCollection = new EvalTableGroupCollection()
                {
                    new R_10022.EvalTableGroup()
                };
            }

            if (table.EvalTableGroupCollection.Count == 0)
                table.EvalTableGroupCollection.Add(new EvalTableGroup());

            table.EvalTableGroupCollection.Type = table.type;
            table.EvalTableGroupCollection.Limit = table.Limit;

            #region Metadata

            table.createDate = DateTime.Now;

            table.id = Guid.NewGuid().ToString();

            #endregion

            return table;
        }

        public void Copy(EvalTable oldEvalTable)
        {
            this.Limit = oldEvalTable.Limit;
            this.EvalTableGroupCollection = oldEvalTable.EvalTableGroupCollection;
            this.AttachedDocumentCollection = oldEvalTable.AttachedDocumentCollection;
        }

        [XmlIgnore]
        public List<ModelValidationResultExtended> LocalValidationErrors { get; set; }

        [XmlIgnore]
        public decimal WeightDecimal
        {
            get
            {
                decimal result = 0.00m;

                if (this.EvalTableGroupCollection != null)
                {
                    foreach (var group in this.EvalTableGroupCollection)
                    {
                        result += group.WeightDecimal;
                    }
                }

                return result;
            }
        }
    }
}
