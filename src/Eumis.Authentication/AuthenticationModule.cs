using Autofac;
using Autofac.Features.AttributeFilters;
using Eumis.Authentication.AccessContexts;
using Eumis.Authentication.Authorization;
using Eumis.Authentication.Authorization.ClaimsContexts.ActuallyPaidAmount;
using Eumis.Authentication.Authorization.ClaimsContexts.AnnualAccountReport;
using Eumis.Authentication.Authorization.ClaimsContexts.Audit;
using Eumis.Authentication.Authorization.ClaimsContexts.AuditAuthorityCommunication;
using Eumis.Authentication.Authorization.ClaimsContexts.CertAuthorityCommunication;
using Eumis.Authentication.Authorization.ClaimsContexts.CertReport;
using Eumis.Authentication.Authorization.ClaimsContexts.CertReportCheck;
using Eumis.Authentication.Authorization.ClaimsContexts.CompensationDocument;
using Eumis.Authentication.Authorization.ClaimsContexts.Contract;
using Eumis.Authentication.Authorization.ClaimsContexts.ContractCommunication;
using Eumis.Authentication.Authorization.ClaimsContexts.ContractDebt;
using Eumis.Authentication.Authorization.ClaimsContexts.ContractOffer;
using Eumis.Authentication.Authorization.ClaimsContexts.ContractProcurement;
using Eumis.Authentication.Authorization.ClaimsContexts.ContractReport;
using Eumis.Authentication.Authorization.ClaimsContexts.ContractReportCertAuthorityCorrection;
using Eumis.Authentication.Authorization.ClaimsContexts.ContractReportCertAuthorityFinancialCorrection;
using Eumis.Authentication.Authorization.ClaimsContexts.ContractReportCertCorrection;
using Eumis.Authentication.Authorization.ClaimsContexts.ContractReportCheck;
using Eumis.Authentication.Authorization.ClaimsContexts.ContractReportCorrection;
using Eumis.Authentication.Authorization.ClaimsContexts.ContractReportFinancialCertCorrection;
using Eumis.Authentication.Authorization.ClaimsContexts.ContractReportFinancialCorrection;
using Eumis.Authentication.Authorization.ClaimsContexts.ContractReportFinancialRevalidation;
using Eumis.Authentication.Authorization.ClaimsContexts.ContractReportRevalidation;
using Eumis.Authentication.Authorization.ClaimsContexts.ContractReportRevalidationCACorrection;
using Eumis.Authentication.Authorization.ClaimsContexts.ContractReportRevalidationCAFinancialCorrection;
using Eumis.Authentication.Authorization.ClaimsContexts.ContractReportTechnicalCorrection;
using Eumis.Authentication.Authorization.ClaimsContexts.ContractSpendingPlan;
using Eumis.Authentication.Authorization.ClaimsContexts.ContractVersion;
using Eumis.Authentication.Authorization.ClaimsContexts.CorrectionDebt;
using Eumis.Authentication.Authorization.ClaimsContexts.EuReimbursedAmount;
using Eumis.Authentication.Authorization.ClaimsContexts.EvalSession;
using Eumis.Authentication.Authorization.ClaimsContexts.EvalSessionSheet;
using Eumis.Authentication.Authorization.ClaimsContexts.EvalSessionStandpoint;
using Eumis.Authentication.Authorization.ClaimsContexts.FinancialCorrection;
using Eumis.Authentication.Authorization.ClaimsContexts.FIReimbursedAmount;
using Eumis.Authentication.Authorization.ClaimsContexts.Irregularity;
using Eumis.Authentication.Authorization.ClaimsContexts.IrregularitySignal;
using Eumis.Authentication.Authorization.ClaimsContexts.MapNodeIndicator;
using Eumis.Authentication.Authorization.ClaimsContexts.Procedure;
using Eumis.Authentication.Authorization.ClaimsContexts.ProcedureMassCommunication;
using Eumis.Authentication.Authorization.ClaimsContexts.Prognosis;
using Eumis.Authentication.Authorization.ClaimsContexts.Programme;
using Eumis.Authentication.Authorization.ClaimsContexts.Project;
using Eumis.Authentication.Authorization.ClaimsContexts.ProjectCommunication;
using Eumis.Authentication.Authorization.ClaimsContexts.ProjectDossier;
using Eumis.Authentication.Authorization.ClaimsContexts.ProjectManagingAuthorityCommunication;
using Eumis.Authentication.Authorization.ClaimsContexts.ProjectMassManagingAuthorityCommunication;
using Eumis.Authentication.Authorization.ClaimsContexts.ProjectVersion;
using Eumis.Authentication.Authorization.ClaimsContexts.ReimbursedAmount;
using Eumis.Authentication.Authorization.ClaimsContexts.RequestPackage;
using Eumis.Authentication.Authorization.ClaimsContexts.SpotCheck;
using Eumis.Authentication.Authorization.ClaimsContexts.User;
using Eumis.Authentication.Authorization.ClaimsContexts.UserOrganization;
using Eumis.Authentication.TokenProviders;
using Eumis.Common.Auth;
using Microsoft.Owin;

namespace Eumis.Authentication
{
    public class AuthenticationModule : Module
    {
        protected override void Load(ContainerBuilder moduleBuilder)
        {
            moduleBuilder.Register(c => c.Resolve<IOwinContext>().GetAccessContext(AuthenticationTypes.Bearer)).As<IAccessContext>().InstancePerRequest();
            moduleBuilder.Register(c => c.Resolve<IOwinContext>().GetAccessContext(AuthenticationTypes.Cookie)).Keyed<IAccessContext>(AuthenticationTypes.Cookie).InstancePerRequest();
            moduleBuilder.Register(c => c.Resolve<IOwinContext>().GetAccessContext(AuthenticationTypes.Bearer)).Keyed<IAccessContext>(AuthenticationTypes.Bearer).InstancePerRequest();

            moduleBuilder.RegisterType<EumisTokenProvider>().As<IEumisTokenProvider>().InstancePerLifetimeScope();

            moduleBuilder.RegisterType<MemoryClaimsCache>().Keyed<IClaimsCache>(ClaimsCaches.User).SingleInstance();
            moduleBuilder.RegisterType<MemoryClaimsCache>().Keyed<IClaimsCache>(ClaimsCaches.RequestPackage).SingleInstance();
            moduleBuilder.RegisterType<MemoryClaimsCache>().Keyed<IClaimsCache>(ClaimsCaches.Programme).SingleInstance();
            moduleBuilder.RegisterType<MemoryClaimsCache>().Keyed<IClaimsCache>(ClaimsCaches.Procedure).SingleInstance();
            moduleBuilder.RegisterType<MemoryClaimsCache>().Keyed<IClaimsCache>(ClaimsCaches.Project).SingleInstance();
            moduleBuilder.RegisterType<MemoryClaimsCache>().Keyed<IClaimsCache>(ClaimsCaches.ProjectCommunication).SingleInstance();
            moduleBuilder.RegisterType<MemoryClaimsCache>().Keyed<IClaimsCache>(ClaimsCaches.ProjectVersion).SingleInstance();
            moduleBuilder.RegisterType<MemoryClaimsCache>().Keyed<IClaimsCache>(ClaimsCaches.EvalSession).SingleInstance();
            moduleBuilder.RegisterType<MemoryClaimsCache>().Keyed<IClaimsCache>(ClaimsCaches.EvalSessionSheet).SingleInstance();
            moduleBuilder.RegisterType<MemoryClaimsCache>().Keyed<IClaimsCache>(ClaimsCaches.EvalSessionStandpoint).SingleInstance();
            moduleBuilder.RegisterType<MemoryClaimsCache>().Keyed<IClaimsCache>(ClaimsCaches.Contract).SingleInstance();
            moduleBuilder.RegisterType<MemoryClaimsCache>().Keyed<IClaimsCache>(ClaimsCaches.ContractProcurement).SingleInstance();
            moduleBuilder.RegisterType<MemoryClaimsCache>().Keyed<IClaimsCache>(ClaimsCaches.ContractProcurementOffer).SingleInstance();
            moduleBuilder.RegisterType<MemoryClaimsCache>().Keyed<IClaimsCache>(ClaimsCaches.ContractVersion).SingleInstance();
            moduleBuilder.RegisterType<MemoryClaimsCache>().Keyed<IClaimsCache>(ClaimsCaches.ContractCommunication).SingleInstance();
            moduleBuilder.RegisterType<MemoryClaimsCache>().Keyed<IClaimsCache>(ClaimsCaches.ContractSpendingPlan).SingleInstance();
            moduleBuilder.RegisterType<MemoryClaimsCache>().Keyed<IClaimsCache>(ClaimsCaches.ContractReport).SingleInstance();
            moduleBuilder.RegisterType<MemoryClaimsCache>().Keyed<IClaimsCache>(ClaimsCaches.ContractReportCheck).SingleInstance();
            moduleBuilder.RegisterType<MemoryClaimsCache>().Keyed<IClaimsCache>(ClaimsCaches.ContractReportFinancialCorrection).SingleInstance();
            moduleBuilder.RegisterType<MemoryClaimsCache>().Keyed<IClaimsCache>(ClaimsCaches.ContractReportTechnicalCorrection).SingleInstance();
            moduleBuilder.RegisterType<MemoryClaimsCache>().Keyed<IClaimsCache>(ClaimsCaches.ContractReportCorrection).SingleInstance();
            moduleBuilder.RegisterType<MemoryClaimsCache>().Keyed<IClaimsCache>(ClaimsCaches.ContractReportRevalidation).SingleInstance();
            moduleBuilder.RegisterType<MemoryClaimsCache>().Keyed<IClaimsCache>(ClaimsCaches.ContractReportFinancialRevalidation).SingleInstance();
            moduleBuilder.RegisterType<MemoryClaimsCache>().Keyed<IClaimsCache>(ClaimsCaches.ContractReportCertCorrection).SingleInstance();
            moduleBuilder.RegisterType<MemoryClaimsCache>().Keyed<IClaimsCache>(ClaimsCaches.ContractReportCertAuthorityCorrection).SingleInstance();
            moduleBuilder.RegisterType<MemoryClaimsCache>().Keyed<IClaimsCache>(ClaimsCaches.ContractReportCertAuthorityFinancialCorrection).SingleInstance();
            moduleBuilder.RegisterType<MemoryClaimsCache>().Keyed<IClaimsCache>(ClaimsCaches.ContractReportRevalidationCertAuthorityCorrection).SingleInstance();
            moduleBuilder.RegisterType<MemoryClaimsCache>().Keyed<IClaimsCache>(ClaimsCaches.ContractReportRevalidationCertAuthorityFinancialCorrection).SingleInstance();
            moduleBuilder.RegisterType<MemoryClaimsCache>().Keyed<IClaimsCache>(ClaimsCaches.ContractReportFinancialCertCorrection).SingleInstance();
            moduleBuilder.RegisterType<MemoryClaimsCache>().Keyed<IClaimsCache>(ClaimsCaches.SpotCheckPlan).SingleInstance();
            moduleBuilder.RegisterType<MemoryClaimsCache>().Keyed<IClaimsCache>(ClaimsCaches.SpotCheck).SingleInstance();
            moduleBuilder.RegisterType<MemoryClaimsCache>().Keyed<IClaimsCache>(ClaimsCaches.Audit).SingleInstance();
            moduleBuilder.RegisterType<MemoryClaimsCache>().Keyed<IClaimsCache>(ClaimsCaches.FlatFinancialCorrection).SingleInstance();
            moduleBuilder.RegisterType<MemoryClaimsCache>().Keyed<IClaimsCache>(ClaimsCaches.FinancialCorrection).SingleInstance();
            moduleBuilder.RegisterType<MemoryClaimsCache>().Keyed<IClaimsCache>(ClaimsCaches.ActuallyPaidAmount).SingleInstance();
            moduleBuilder.RegisterType<MemoryClaimsCache>().Keyed<IClaimsCache>(ClaimsCaches.DebtReimbursedAmount).SingleInstance();
            moduleBuilder.RegisterType<MemoryClaimsCache>().Keyed<IClaimsCache>(ClaimsCaches.ContractReimbursedAmount).SingleInstance();
            moduleBuilder.RegisterType<MemoryClaimsCache>().Keyed<IClaimsCache>(ClaimsCaches.CompensationDocument).SingleInstance();
            moduleBuilder.RegisterType<MemoryClaimsCache>().Keyed<IClaimsCache>(ClaimsCaches.IrregularitySignal).SingleInstance();
            moduleBuilder.RegisterType<MemoryClaimsCache>().Keyed<IClaimsCache>(ClaimsCaches.Irregularity).SingleInstance();
            moduleBuilder.RegisterType<MemoryClaimsCache>().Keyed<IClaimsCache>(ClaimsCaches.IrregularityVersion).SingleInstance();
            moduleBuilder.RegisterType<MemoryClaimsCache>().Keyed<IClaimsCache>(ClaimsCaches.ContractDebt).SingleInstance();
            moduleBuilder.RegisterType<MemoryClaimsCache>().Keyed<IClaimsCache>(ClaimsCaches.CertReport).SingleInstance();
            moduleBuilder.RegisterType<MemoryClaimsCache>().Keyed<IClaimsCache>(ClaimsCaches.CertReportCheck).SingleInstance();
            moduleBuilder.RegisterType<MemoryClaimsCache>().Keyed<IClaimsCache>(ClaimsCaches.EuReimbursedAmount).SingleInstance();
            moduleBuilder.RegisterType<MemoryClaimsCache>().Keyed<IClaimsCache>(ClaimsCaches.CorrectionDebt).SingleInstance();
            moduleBuilder.RegisterType<MemoryClaimsCache>().Keyed<IClaimsCache>(ClaimsCaches.CertAuthorityCommunication).SingleInstance();
            moduleBuilder.RegisterType<MemoryClaimsCache>().Keyed<IClaimsCache>(ClaimsCaches.AuditAuthorityCommunication).SingleInstance();
            moduleBuilder.RegisterType<MemoryClaimsCache>().Keyed<IClaimsCache>(ClaimsCaches.ProjectDossier).SingleInstance();
            moduleBuilder.RegisterType<MemoryClaimsCache>().Keyed<IClaimsCache>(ClaimsCaches.ProgrammePrognosis).SingleInstance();
            moduleBuilder.RegisterType<MemoryClaimsCache>().Keyed<IClaimsCache>(ClaimsCaches.ProgrammePriorityPrognosis).SingleInstance();
            moduleBuilder.RegisterType<MemoryClaimsCache>().Keyed<IClaimsCache>(ClaimsCaches.ProcedurePrognosis).SingleInstance();
            moduleBuilder.RegisterType<MemoryClaimsCache>().Keyed<IClaimsCache>(ClaimsCaches.FIReimbursedAmount).SingleInstance();
            moduleBuilder.RegisterType<MemoryClaimsCache>().Keyed<IClaimsCache>(ClaimsCaches.IndicativeAnnualWorkingProgramme).SingleInstance();
            moduleBuilder.RegisterType<MemoryClaimsCache>().Keyed<IClaimsCache>(ClaimsCaches.ProcedureMassCommunication).SingleInstance();
            moduleBuilder.RegisterType<MemoryClaimsCache>().Keyed<IClaimsCache>(ClaimsCaches.AnnualAccountReport).SingleInstance();
            moduleBuilder.RegisterType<MemoryClaimsCache>().Keyed<IClaimsCache>(ClaimsCaches.ProjectManagingAuthorityCommunication).SingleInstance();
            moduleBuilder.RegisterType<MemoryClaimsCache>().Keyed<IClaimsCache>(ClaimsCaches.ProjectMassManagingAuthorityCommunication).SingleInstance();

            moduleBuilder.RegisterType<MemoryCacheManager>().As<ICacheManager>();
            moduleBuilder.RegisterType<ProgrammeCacheManager>().As<IProgrammeCacheManager>().SingleInstance();

            moduleBuilder.RegisterType<Authorizer>().As<IAuthorizer>();
            moduleBuilder.RegisterType<UserClaimsContext>().As<IUserClaimsContext>().WithAttributeFiltering();
            moduleBuilder.RegisterType<UserClaimsContext>().As<IUserClaimsContextInternal>().WithAttributeFiltering();
            moduleBuilder.RegisterType<RequestPackageClaimsContext>().As<IRequestPackageClaimsContext>().WithAttributeFiltering();
            moduleBuilder.RegisterType<UserOrganizationClaimsContext>().As<IUserOrganizationClaimsContext>().WithAttributeFiltering();
            moduleBuilder.RegisterType<ProgrammeClaimsContext>().As<IProgrammeClaimsContext>().WithAttributeFiltering();
            moduleBuilder.RegisterType<ProcedureClaimsContext>().As<IProcedureClaimsContext>().WithAttributeFiltering();
            moduleBuilder.RegisterType<ProjectClaimsContext>().As<IProjectClaimsContext>().WithAttributeFiltering();
            moduleBuilder.RegisterType<ProjectCommunicationClaimsContext>().As<IProjectCommunicationClaimsContext>().WithAttributeFiltering();
            moduleBuilder.RegisterType<ProjectVersionClaimsContext>().As<IProjectVersionClaimsContext>().WithAttributeFiltering();
            moduleBuilder.RegisterType<EvalSessionClaimsContext>().As<IEvalSessionClaimsContext>().WithAttributeFiltering();
            moduleBuilder.RegisterType<EvalSessionSheetClaimsContext>().As<IEvalSessionSheetClaimsContext>().WithAttributeFiltering();
            moduleBuilder.RegisterType<EvalSessionStandpointClaimsContext>().As<IEvalSessionStandpointClaimsContext>().WithAttributeFiltering();
            moduleBuilder.RegisterType<ContractClaimsContext>().As<IContractClaimsContext>().WithAttributeFiltering();
            moduleBuilder.RegisterType<ContractVersionClaimsContext>().As<IContractVersionClaimsContext>().WithAttributeFiltering();
            moduleBuilder.RegisterType<ContractProcurementClaimsContext>().As<IContractProcurementClaimsContext>().WithAttributeFiltering();
            moduleBuilder.RegisterType<ContractCommunicationClaimsContext>().As<IContractCommunicationClaimsContext>().WithAttributeFiltering();
            moduleBuilder.RegisterType<ContractProcurementsOfferClaimsContext>().As<IContractProcurementsOfferClaimsContext>().WithAttributeFiltering();
            moduleBuilder.RegisterType<ContractSpendingPlanClaimsContext>().As<IContractSpendingPlanClaimsContext>().WithAttributeFiltering();
            moduleBuilder.RegisterType<ContractReportClaimsContext>().As<IContractReportClaimsContext>().WithAttributeFiltering();
            moduleBuilder.RegisterType<ContractReportCheckClaimsContext>().As<IContractReportCheckClaimsContext>().WithAttributeFiltering();
            moduleBuilder.RegisterType<ContractReportFinancialCorrectionClaimsContext>().As<IContractReportFinancialCorrectionClaimsContext>().WithAttributeFiltering();
            moduleBuilder.RegisterType<ContractReportTechnicalCorrectionClaimsContext>().As<IContractReportTechnicalCorrectionClaimsContext>().WithAttributeFiltering();
            moduleBuilder.RegisterType<SpotCheckPlanClaimsContext>().As<ISpotCheckPlanClaimsContext>().WithAttributeFiltering();
            moduleBuilder.RegisterType<SpotCheckClaimsContext>().As<ISpotCheckClaimsContext>().WithAttributeFiltering();
            moduleBuilder.RegisterType<AuditClaimsContext>().As<IAuditClaimsContext>().WithAttributeFiltering();
            moduleBuilder.RegisterType<FlatFinancialCorrectionClaimsContext>().As<IFlatFinancialCorrectionClaimsContext>().WithAttributeFiltering();
            moduleBuilder.RegisterType<FinancialCorrectionClaimsContext>().As<IFinancialCorrectionClaimsContext>().WithAttributeFiltering();
            moduleBuilder.RegisterType<ActuallyPaidAmountClaimsContext>().As<IActuallyPaidAmountClaimsContext>().WithAttributeFiltering();
            moduleBuilder.RegisterType<DebtReimbursedAmountClaimsContext>().As<IDebtReimbursedAmountClaimsContext>().WithAttributeFiltering();
            moduleBuilder.RegisterType<ContractReimbursedAmountClaimsContext>().As<IContractReimbursedAmountClaimsContext>().WithAttributeFiltering();
            moduleBuilder.RegisterType<CompensationDocumentClaimsContext>().As<ICompensationDocumentClaimsContext>().WithAttributeFiltering();
            moduleBuilder.RegisterType<IrregularitySignalClaimsContext>().As<IIrregularitySignalClaimsContext>().WithAttributeFiltering();
            moduleBuilder.RegisterType<IrregularityClaimsContext>().As<IIrregularityClaimsContext>().WithAttributeFiltering();
            moduleBuilder.RegisterType<IrregularityVersionClaimsContext>().As<IIrregularityVersionClaimsContext>().WithAttributeFiltering();
            moduleBuilder.RegisterType<ContractDebtClaimsContext>().As<IContractDebtClaimsContext>().WithAttributeFiltering();
            moduleBuilder.RegisterType<CertReportClaimsContext>().As<ICertReportClaimsContext>().WithAttributeFiltering();
            moduleBuilder.RegisterType<AnnualAccountReportClaimsContext>().As<IAnnualAccountReportClaimsContext>().WithAttributeFiltering();
            moduleBuilder.RegisterType<CertReportCheckClaimsContext>().As<ICertReportCheckClaimsContext>().WithAttributeFiltering();
            moduleBuilder.RegisterType<EuReimbursedAmountClaimsContext>().As<IEuReimbursedAmountClaimsContext>().WithAttributeFiltering();
            moduleBuilder.RegisterType<CertAuthorityCommunicationClaimsContext>().As<ICertAuthorityCommunicationClaimsContext>().WithAttributeFiltering();
            moduleBuilder.RegisterType<AuditAuthorityCommunicationClaimsContext>().As<IAuditAuthorityCommunicationClaimsContext>().WithAttributeFiltering();
            moduleBuilder.RegisterType<CorrectionDebtClaimsContext>().As<ICorrectionDebtClaimsContext>().WithAttributeFiltering();
            moduleBuilder.RegisterType<ContractReportCorrectionClaimsContext>().As<IContractReportCorrectionClaimsContext>().WithAttributeFiltering();
            moduleBuilder.RegisterType<ContractReportRevalidationClaimsContext>().As<IContractReportRevalidationClaimsContext>().WithAttributeFiltering();
            moduleBuilder.RegisterType<ContractReportFinancialRevalidationClaimsContext>().As<IContractReportFinancialRevalidationClaimsContext>().WithAttributeFiltering();
            moduleBuilder.RegisterType<ContractReportCertCorrectionClaimsContext>().As<IContractReportCertCorrectionClaimsContext>().WithAttributeFiltering();
            moduleBuilder.RegisterType<ContractReportFinancialCertCorrectionClaimsContext>().As<IContractReportFinancialCertCorrectionClaimsContext>().WithAttributeFiltering();
            moduleBuilder.RegisterType<ProjectDossierClaimsContext>().As<IProjectDossierClaimsContext>().WithAttributeFiltering();
            moduleBuilder.RegisterType<ProgrammePrognosisClaimsContext>().As<IProgrammePrognosisClaimsContext>().WithAttributeFiltering();
            moduleBuilder.RegisterType<ProgrammePriorityPrognosisClaimsContext>().As<IProgrammePriorityPrognosisClaimsContext>().WithAttributeFiltering();
            moduleBuilder.RegisterType<ProcedurePrognosisClaimsContext>().As<IProcedurePrognosisClaimsContext>().WithAttributeFiltering();
            moduleBuilder.RegisterType<FIReimbursedAmountClaimsContext>().As<IFIReimbursedAmountClaimsContext>().WithAttributeFiltering();
            moduleBuilder.RegisterType<ContractReportCertAuthorityCorrectionClaimsContext>().As<IContractReportCertAuthorityCorrectionClaimsContext>().WithAttributeFiltering();
            moduleBuilder.RegisterType<ContractReportCertAuthorityFinancialCorrectionClaimsContext>().As<IContractReportCertAuthorityFinancialCorrectionClaimsContext>().WithAttributeFiltering();
            moduleBuilder.RegisterType<ContractReportRevalidationCACorrectionClaimsContext>().As<IContractReportRevalidationCACorrectionClaimsContext>().WithAttributeFiltering();
            moduleBuilder.RegisterType<ContractReportRevalidationCAFinancialCorrectionClaimsContext>().As<IContractReportRevalidationCAFinancialCorrectionClaimsContext>().WithAttributeFiltering();
            moduleBuilder.RegisterType<MapNodeIndicatorClaimsContext>().As<IMapNodeIndicatorClaimsContext>().WithAttributeFiltering();
            moduleBuilder.RegisterType<ProcedureMassCommunicationClaimsContext>().As<IProcedureMassCommunicationClaimsContext>().WithAttributeFiltering();
            moduleBuilder.RegisterType<ProjectManagingAuthorityCommunicationClaimsContext>().As<IProjectManagingAuthorityCommunicationClaimsContext>().WithAttributeFiltering();
            moduleBuilder.RegisterType<ProjectMassManagingAuthorityCommunicationClaimsContext>().As<IProjectMassManagingAuthorityCommunicationClaimsContext>().WithAttributeFiltering();
        }
    }
}
