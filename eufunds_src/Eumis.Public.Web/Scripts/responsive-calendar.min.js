(function () { !function (t) { "use strict"; var n, e, a; if ((n = function (n, e) { var a; return this.$element = n, this.options = e, this.weekDays = ["sun", "mon", "tue", "wed", "thu", "fri", "sat", "sun"], this.time = new Date, this.currentYear = this.time.getFullYear(), this.currentMonth = this.time.getMonth(), this.url = t(".responsive-calendar").data("url"), this.options.time && (a = this.splitDateString(this.options.time), this.currentYear = a.year, this.currentMonth = a.month), this.initialDraw(), null }).prototype = { addLeadingZero: function (t) { return t < 10 ? "0" + t : "" + t }, applyTransition: function (t, n) { return t.css("transition", n), t.css("-ms-transition", "-ms-" + n), t.css("-moz-transition", "-moz-" + n), t.css("-webkit-transition", "-webkit-" + n) }, applyBackfaceVisibility: function (t) { return t.css("backface-visibility", "hidden"), t.css("-ms-backface-visibility", "hidden"), t.css("-moz-backface-visibility", "hidden"), t.css("-webkit-backface-visibility", "hidden") }, applyTransform: function (t, n) { return t.css("transform", n), t.css("-ms-transform", n), t.css("-moz-transform", n), t.css("-webkit-transform", n) }, splitDateString: function (t) { var n; return n = t.split("-"), { year: parseInt(n[0]), month: parseInt(n[1] - 1), day: parseInt(n[2]) } }, initialDraw: function () { var n = this; t.ajax({ url: "/" + this.url + "?_format=json" }).done(function (t) { var e = {}; return jQuery.each(t, function (t, n) { e[n.doc_date] = { number: n.count, url: n.url } }), n.options.events = e, n.drawDays(n.currentYear, n.currentMonth) }) }, editDays: function (t) { var n, e, a, r, i; i = []; for (n in t) a = t[n], this.options.events[n] = t[n], r = this.splitDateString(n), (e = this.$element.find('[data-year="' + r.year + '"][data-month="' + (r.month + 1) + '"][data-day="' + r.day + '"]').parent(".day")).removeClass("active"), e.find(".badge").remove(), e.find("a").removeAttr("href"), this.currentMonth === r.month || this.options.activateNonCurrentMonths ? i.push(this.makeActive(e, a)) : i.push(void 0); return i }, clearDays: function (t) { var n, e, a, r, i, s; for (s = [], r = 0, i = t.length; r < i; r++)n = t[r], delete this.options.events[n], a = this.splitDateString(n), (e = this.$element.find('[data-year="' + a.year + '"][data-month="' + (a.month + 1) + '"][data-day="' + a.day + '"]').parent(".day")).removeClass("active"), e.find(".badge").remove(), s.push(e.find("a").removeAttr("href")); return s }, clearAll: function () { var n, e, a, r, i, s; for (this.options.events = {}, s = [], a = r = 0, i = (e = this.$element.find('[data-group="days"] .day')).length; r < i; a = ++r)n = e[a], t(n).removeClass("active"), t(n).find(".badge").remove(), s.push(t(n).find("a").removeAttr("href")); return s }, setMonthYear: function (t) { var n; return n = this.splitDateString(t), this.currentMonth = this.drawDays(n.year, n.month), this.currentYear = n.year }, prev: function () { this.currentMonth - 1 < 0 ? (this.currentYear = this.currentYear - 1, this.currentMonth = 11) : this.currentMonth = this.currentMonth - 1; var n = this, e = ("00" + (this.currentMonth + 1)).slice(-2); return t.ajax({ url: "/" + this.url + "/" + n.currentYear + e + "?_format=json" }).done(function (t) { var e = {}; jQuery.each(t, function (t, n) { e[n.doc_date] = { number: n.count, url: n.url } }), n.options.events = e, n.drawDays(n.currentYear, n.currentMonth) }), this.options.onMonthChange && this.options.onMonthChange.call(this), null }, next: function () { this.currentMonth + 1 > 11 ? (this.currentYear = this.currentYear + 1, this.currentMonth = 0) : this.currentMonth = this.currentMonth + 1; var n = this, e = ("00" + (this.currentMonth + 1)).slice(-2); return t.ajax({ url: "/" + this.url + "/" + n.currentYear + e + "?_format=json" }).done(function (t) { var e = {}; jQuery.each(t, function (t, n) { e[n.doc_date] = { number: n.count, url: n.url } }), n.options.events = e, n.drawDays(n.currentYear, n.currentMonth) }), this.options.onMonthChange && this.options.onMonthChange.call(this), null }, curr: function () { this.currentYear = this.time.getFullYear(), this.currentMonth = this.time.getMonth(); var n = this; return t.ajax({ url: "/" + this.url + "?_format=json" }).done(function (t) { var e = {}; jQuery.each(t, function (t, n) { e[n.doc_date] = { number: n.count, url: n.url } }), n.options.events = e, n.drawDays(n.currentYear, n.currentMonth) }), this.options.onMonthChange && this.options.onMonthChange.call(this), null }, addOthers: function (n, e) { var a; return "object" == typeof e && (null != e.number && (a = t("<span></span>").html(e.number).addClass("badge"), null != e.badgeClass && a.addClass(e.badgeClass), n.append(a)), e.url && n.find("a").attr("href", e.url)), n }, makeActive: function (t, n) { var e, a, r, i, s; if (n) { if (n.class) for (r = i = 0, s = (e = n.class.split(" ")).length; i < s; r = ++i)a = e[r], t.addClass(a); else t.addClass("active"); t = this.addOthers(t, n) } return t }, getDaysInMonth: function (t, n) { return new Date(t, n + 1, 0).getDate() }, drawDay: function (n, e, a, r, i) { var s, o, h, u, d, l; return u = t("<div></div>").addClass("day"), (o = new Date).setHours(0, 0, 0, 0), l = (d = new Date(e, a - 1, r)).getTime() < o.getTime() ? "past" : d.getTime() === o.getTime() ? "today" : "future", u.addClass(this.weekDays[i % 7]), u.addClass(l), h = e + "-" + this.addLeadingZero(a) + "-" + this.addLeadingZero(r), (r <= 0 || r > n) && (r = (s = new Date(e, a - 1, r)).getDate(), a = s.getMonth() + 1, e = s.getFullYear(), u.addClass("not-current").addClass(l), this.options.activateNonCurrentMonths && (h = e + "-" + this.addLeadingZero(a) + "-" + this.addLeadingZero(r))), u.append(t("<a>" + r + "</a>").attr("data-day", r).attr("data-month", a).attr("data-year", e)), this.options.monthChangeAnimation && (this.applyTransform(u, "rotateY(180deg)"), this.applyBackfaceVisibility(u)), u = this.makeActive(u, this.options.events[h]), this.$element.find('[data-group="days"]').append(u) }, drawDays: function (n, e) { var a, r, i, s, o, h, u, d, l, c, m, p, f, y, v, g; if (m = this, a = (p = new Date(n, e)).getMonth(), l = p.getMonth() + 1, y = p.getFullYear(), p.setDate(1), o = this.options.startFromSunday ? p.getDay() + 1 : p.getDay() || 7, u = this.getDaysInMonth(n, e), f = 0, this.options.monthChangeAnimation) for (i = this.$element.find('[data-group="days"] .day'), h = v = 0, g = i.length; v < g; h = ++v)r = i[h], s = .01 * h, this.applyTransition(t(r), "transform .5s ease " + s + "s"), this.applyTransform(t(r), "rotateY(180deg)"), this.applyBackfaceVisibility(t(r)), f = 1e3 * (s + .1); return 2, this.options.allRows ? d = 42 : (c = Math.ceil((o - 1 + u) / 7), d = 7 * c), this.$element.find("[data-head-year]").html(p.getFullYear()), this.$element.find("[data-head-month]").html(this.options.translateMonths[p.getMonth()]), setTimeout(function () { var n; for (m.$element.find('[data-group="days"]').empty(), n = 2 - o, h = m.options.startFromSunday ? 0 : 1; n < d - o + 2;)m.drawDay(u, y, l, n, h), n += 1, h += 1; return setTimeout(function () { var n, e; for (i = m.$element.find('[data-group="days"] .day'), h = n = 0, e = i.length; n < e; h = ++n)r = i[h], m.applyTransition(t(r), "transform .5s ease " + .01 * h + "s"), m.applyTransform(t(r), "rotateY(0deg)"); if (m.options.onDayClick && m.$element.find('[data-group="days"] .day a').click(function () { return m.options.onDayClick.call(this, m.options.events) }), m.options.onDayHover && m.$element.find('[data-group="days"] .day a').hover(function () { return m.options.onDayHover.call(this, m.options.events) }), m.options.onActiveDayClick && m.$element.find('[data-group="days"] .day.active a').click(function () { return m.options.onActiveDayClick.call(this, m.options.events) }), m.options.onActiveDayHover) return m.$element.find('[data-group="days"] .day.active a').hover(function () { return m.options.onActiveDayHover.call(this, m.options.events) }) }, 0) }, f), a } }, t.fn.responsiveCalendar = function (e, a) { var r, i, s; return i = t.extend({}, t.fn.responsiveCalendar.defaults, "object" == typeof e && e), s = { next: "next", prev: "prev", edit: "editDays", clear: "clearDays", clearAll: "clearAll", getYearMonth: "getYearMonth", jump: "jump", curr: "curr" }, r = function (e) { var a; return i = t.metadata ? t.extend({}, i, e.metadata()) : i, e.data("calendar", a = new n(e, i)), i.onInit && i.onInit.call(a), e.find("[data-go]").click(function () { if ("prev" === t(this).data("go") && a.prev(), "next" === t(this).data("go")) return a.next() }) }, this.each(function () { var n, i; return (i = (n = t(this)).data("calendar")) ? "string" == typeof e ? null != s[e] ? i[s[e]](a) : i.setMonthYear(e) : "number" == typeof e && i.jump(Math.abs(e) + 1) : r(n), null }) }, t.fn.responsiveCalendar.defaults = { translateMonths: ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"], events: {}, time: void 0, allRows: !0, startFromSunday: !1, activateNonCurrentMonths: !1, monthChangeAnimation: !0, onInit: void 0, onDayClick: void 0, onDayHover: void 0, onActiveDayClick: void 0, onActiveDayHover: void 0, onMonthChange: void 0 }, (a = t('[data-spy="responsive-calendar"]')).length) e = {}, null != a.data("translate-months") && (e.translateMonths = a.data("translate-months").split(",")), null != a.data("time") && (e.time = a.data("time")), null != a.data("all-rows") && (e.allRows = a.data("all-rows")), null != a.data("start-from-sunday") && (e.startFromSunday = a.data("start-from-sunday")), null != a.data("activate-non-current-months") && (e.activateNonCurrentMonths = a.data("activate-non-current-months")), null != a.data("month-change-animation") && (e.monthChangeAnimation = a.data("month-change-animation")), a.responsiveCalendar(e) }(jQuery) }).call(this);